// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: recorder/provider.proto

package recorder

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameNotifyType int32

const (
	// 未指定
	GameNotifyType_GAME_NOTIFY_TYPE_UNSPECIFIED GameNotifyType = 0
	// 通知遊戲供應狀況改變
	GameNotifyType_NOTIFY_GAME_PROVIDE_STATE_CHANGE GameNotifyType = 1
	// 通知遊戲流程截圖
	GameNotifyType_NOTIFY_GAME_CAPTURE GameNotifyType = 5
	// 通知遊戲流程荷官登入
	GameNotifyType_NOTIFY_GAME_DEALER_LOGIN GameNotifyType = 6
	// 通知遊戲流程荷官登出
	GameNotifyType_NOTIFY_GAME_DEALER_LOGOUT GameNotifyType = 7
	// 通知遊戲流程開始換靴，更換結束呼叫 NOTIFY_SHOE_START
	GameNotifyType_NOTIFY_GAME_CHANGING_SHOE GameNotifyType = 8
	// 通知遊戲班開始
	GameNotifyType_NOTIFY_SHIFT_START GameNotifyType = 9
	// 通知遊戲班結束
	GameNotifyType_NOTIFY_SHIFT_END GameNotifyType = 10
	// 通知新靴開始
	GameNotifyType_NOTIFY_SHOE_START GameNotifyType = 11
	// 通知此靴結束
	GameNotifyType_NOTIFY_SHOE_END GameNotifyType = 12
	// 新局開始
	GameNotifyType_NOTIFY_ROUND_START GameNotifyType = 13
	// 通知遊戲局開始下注
	GameNotifyType_NOTIFY_ROUND_BET GameNotifyType = 14
	// 通知遊戲局結束下注
	GameNotifyType_NOTIFY_ROUND_NO_MORE_BET GameNotifyType = 15
	// 通知遊戲局進行步驟
	GameNotifyType_NOTIFY_ROUND_STEP GameNotifyType = 16
	// 遊戲局完成
	GameNotifyType_NOTIFY_ROUND_FINISH GameNotifyType = 17
	// 通知遊戲局取消
	GameNotifyType_NOTIFY_ROUND_CANCEL GameNotifyType = 18
	// 通知遊戲局回放連結
	GameNotifyType_NOTIFY_ROUND_PLAYBACK GameNotifyType = 19
)

// Enum value maps for GameNotifyType.
var (
	GameNotifyType_name = map[int32]string{
		0:  "GAME_NOTIFY_TYPE_UNSPECIFIED",
		1:  "NOTIFY_GAME_PROVIDE_STATE_CHANGE",
		5:  "NOTIFY_GAME_CAPTURE",
		6:  "NOTIFY_GAME_DEALER_LOGIN",
		7:  "NOTIFY_GAME_DEALER_LOGOUT",
		8:  "NOTIFY_GAME_CHANGING_SHOE",
		9:  "NOTIFY_SHIFT_START",
		10: "NOTIFY_SHIFT_END",
		11: "NOTIFY_SHOE_START",
		12: "NOTIFY_SHOE_END",
		13: "NOTIFY_ROUND_START",
		14: "NOTIFY_ROUND_BET",
		15: "NOTIFY_ROUND_NO_MORE_BET",
		16: "NOTIFY_ROUND_STEP",
		17: "NOTIFY_ROUND_FINISH",
		18: "NOTIFY_ROUND_CANCEL",
		19: "NOTIFY_ROUND_PLAYBACK",
	}
	GameNotifyType_value = map[string]int32{
		"GAME_NOTIFY_TYPE_UNSPECIFIED":     0,
		"NOTIFY_GAME_PROVIDE_STATE_CHANGE": 1,
		"NOTIFY_GAME_CAPTURE":              5,
		"NOTIFY_GAME_DEALER_LOGIN":         6,
		"NOTIFY_GAME_DEALER_LOGOUT":        7,
		"NOTIFY_GAME_CHANGING_SHOE":        8,
		"NOTIFY_SHIFT_START":               9,
		"NOTIFY_SHIFT_END":                 10,
		"NOTIFY_SHOE_START":                11,
		"NOTIFY_SHOE_END":                  12,
		"NOTIFY_ROUND_START":               13,
		"NOTIFY_ROUND_BET":                 14,
		"NOTIFY_ROUND_NO_MORE_BET":         15,
		"NOTIFY_ROUND_STEP":                16,
		"NOTIFY_ROUND_FINISH":              17,
		"NOTIFY_ROUND_CANCEL":              18,
		"NOTIFY_ROUND_PLAYBACK":            19,
	}
)

func (x GameNotifyType) Enum() *GameNotifyType {
	p := new(GameNotifyType)
	*p = x
	return p
}

func (x GameNotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameNotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_recorder_provider_proto_enumTypes[0].Descriptor()
}

func (GameNotifyType) Type() protoreflect.EnumType {
	return &file_recorder_provider_proto_enumTypes[0]
}

func (x GameNotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameNotifyType.Descriptor instead.
func (GameNotifyType) EnumDescriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{0}
}

type GameProvideState int32

const (
	// 未指定
	GameProvideState_GAME_PROVIDE_STATE_UNSPECIFIED GameProvideState = 0
	// 提供
	GameProvideState_GAME_PROVIDE_AVAILABLE GameProvideState = 1
	// 此局結束後維護
	GameProvideState_GAME_PROVIDE_MAINTEN_AFTER_ROUND GameProvideState = 2
	// 維護
	GameProvideState_GAME_PROVIDE_IN_MAINTENANCE GameProvideState = 3
	// 此局結束後關閉
	GameProvideState_GAME_PROVIDE_CLOSE_AFTER_ROUND GameProvideState = 4
	// 此局結束後關閉
	GameProvideState_GAME_PROVIDE_CLOSE GameProvideState = 5
	// 此局結束後關閉
	GameProvideState_GAME_PROVIDE_AVAILABLE_AFTER_ROUND GameProvideState = 6
)

// Enum value maps for GameProvideState.
var (
	GameProvideState_name = map[int32]string{
		0: "GAME_PROVIDE_STATE_UNSPECIFIED",
		1: "GAME_PROVIDE_AVAILABLE",
		2: "GAME_PROVIDE_MAINTEN_AFTER_ROUND",
		3: "GAME_PROVIDE_IN_MAINTENANCE",
		4: "GAME_PROVIDE_CLOSE_AFTER_ROUND",
		5: "GAME_PROVIDE_CLOSE",
		6: "GAME_PROVIDE_AVAILABLE_AFTER_ROUND",
	}
	GameProvideState_value = map[string]int32{
		"GAME_PROVIDE_STATE_UNSPECIFIED":     0,
		"GAME_PROVIDE_AVAILABLE":             1,
		"GAME_PROVIDE_MAINTEN_AFTER_ROUND":   2,
		"GAME_PROVIDE_IN_MAINTENANCE":        3,
		"GAME_PROVIDE_CLOSE_AFTER_ROUND":     4,
		"GAME_PROVIDE_CLOSE":                 5,
		"GAME_PROVIDE_AVAILABLE_AFTER_ROUND": 6,
	}
)

func (x GameProvideState) Enum() *GameProvideState {
	p := new(GameProvideState)
	*p = x
	return p
}

func (x GameProvideState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameProvideState) Descriptor() protoreflect.EnumDescriptor {
	return file_recorder_provider_proto_enumTypes[1].Descriptor()
}

func (GameProvideState) Type() protoreflect.EnumType {
	return &file_recorder_provider_proto_enumTypes[1]
}

func (x GameProvideState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameProvideState.Descriptor instead.
func (GameProvideState) EnumDescriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{1}
}

type RecordQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查詢起時
	TsFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts_from,json=tsFrom,proto3" json:"tsFrom" bson:"tsFrom" yaml:"tsFrom"`
	// 查詢終時
	TsTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts_to,json=tsTo,proto3" json:"tsTo" bson:"tsTo" yaml:"tsTo"`
	// 筆數 預設 100
	Limit *int64 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit" bson:"limit" yaml:"limit"`
	// 頁面
	Page *int64 `protobuf:"varint,4,opt,name=page,proto3,oneof" json:"page" bson:"page" yaml:"page"`
}

func (x *RecordQuery) Reset() {
	*x = RecordQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordQuery) ProtoMessage() {}

func (x *RecordQuery) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordQuery.ProtoReflect.Descriptor instead.
func (*RecordQuery) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{0}
}

func (x *RecordQuery) GetTsFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TsFrom
	}
	return nil
}

func (x *RecordQuery) GetTsTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TsTo
	}
	return nil
}

func (x *RecordQuery) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *RecordQuery) GetPage() int64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type FetchShiftRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	RecordId []byte `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,oneof" json:"recordId" bson:"recordId" yaml:"recordId"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 班代碼
	ShiftCode *string `protobuf:"bytes,8,opt,name=shift_code,json=shiftCode,proto3,oneof" json:"shiftCode" bson:"shiftCode" yaml:"shiftCode"`
	// 查詢限制
	Query *RecordQuery `protobuf:"bytes,36,opt,name=query,proto3" json:"query" bson:"query" yaml:"query"`
}

func (x *FetchShiftRecordRequest) Reset() {
	*x = FetchShiftRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShiftRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShiftRecordRequest) ProtoMessage() {}

func (x *FetchShiftRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShiftRecordRequest.ProtoReflect.Descriptor instead.
func (*FetchShiftRecordRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{1}
}

func (x *FetchShiftRecordRequest) GetRecordId() []byte {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *FetchShiftRecordRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *FetchShiftRecordRequest) GetShiftCode() string {
	if x != nil && x.ShiftCode != nil {
		return *x.ShiftCode
	}
	return ""
}

func (x *FetchShiftRecordRequest) GetQuery() *RecordQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type FetchShiftRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShiftRecord []*ShiftRecord `protobuf:"bytes,1,rep,name=shift_record,json=shiftRecord,proto3" json:"shiftRecord" bson:"shiftRecord" yaml:"shiftRecord"`
}

func (x *FetchShiftRecordResponse) Reset() {
	*x = FetchShiftRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShiftRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShiftRecordResponse) ProtoMessage() {}

func (x *FetchShiftRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShiftRecordResponse.ProtoReflect.Descriptor instead.
func (*FetchShiftRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{2}
}

func (x *FetchShiftRecordResponse) GetShiftRecord() []*ShiftRecord {
	if x != nil {
		return x.ShiftRecord
	}
	return nil
}

type FetchShoeRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 靴代碼
	ShoeCode *string `protobuf:"bytes,10,opt,name=shoe_code,json=shoeCode,proto3,oneof" json:"shoeCode" bson:"shoeCode" yaml:"shoeCode"`
	// 查詢限制
	Query *RecordQuery `protobuf:"bytes,36,opt,name=query,proto3" json:"query" bson:"query" yaml:"query"`
}

func (x *FetchShoeRecordRequest) Reset() {
	*x = FetchShoeRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShoeRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShoeRecordRequest) ProtoMessage() {}

func (x *FetchShoeRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShoeRecordRequest.ProtoReflect.Descriptor instead.
func (*FetchShoeRecordRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{3}
}

func (x *FetchShoeRecordRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *FetchShoeRecordRequest) GetShoeCode() string {
	if x != nil && x.ShoeCode != nil {
		return *x.ShoeCode
	}
	return ""
}

func (x *FetchShoeRecordRequest) GetQuery() *RecordQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type FetchShoeRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShoeRecord []*ShoeRecord `protobuf:"bytes,1,rep,name=shoe_record,json=shoeRecord,proto3" json:"shoeRecord" bson:"shoeRecord" yaml:"shoeRecord"`
}

func (x *FetchShoeRecordResponse) Reset() {
	*x = FetchShoeRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchShoeRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchShoeRecordResponse) ProtoMessage() {}

func (x *FetchShoeRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchShoeRecordResponse.ProtoReflect.Descriptor instead.
func (*FetchShoeRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{4}
}

func (x *FetchShoeRecordResponse) GetShoeRecord() []*ShoeRecord {
	if x != nil {
		return x.ShoeRecord
	}
	return nil
}

type FetchRoundRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 局代碼
	RoundCode *string `protobuf:"bytes,12,opt,name=round_code,json=roundCode,proto3,oneof" json:"roundCode" bson:"roundCode" yaml:"roundCode"`
	// 查詢限制
	Query *RecordQuery `protobuf:"bytes,36,opt,name=query,proto3" json:"query" bson:"query" yaml:"query"`
}

func (x *FetchRoundRecordRequest) Reset() {
	*x = FetchRoundRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRoundRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRoundRecordRequest) ProtoMessage() {}

func (x *FetchRoundRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRoundRecordRequest.ProtoReflect.Descriptor instead.
func (*FetchRoundRecordRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{5}
}

func (x *FetchRoundRecordRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetRoundCode() string {
	if x != nil && x.RoundCode != nil {
		return *x.RoundCode
	}
	return ""
}

func (x *FetchRoundRecordRequest) GetQuery() *RecordQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type FetchRoundRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundRecord []*RoundRecord `protobuf:"bytes,1,rep,name=round_record,json=roundRecord,proto3" json:"roundRecord" bson:"roundRecord" yaml:"roundRecord"`
}

func (x *FetchRoundRecordResponse) Reset() {
	*x = FetchRoundRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRoundRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRoundRecordResponse) ProtoMessage() {}

func (x *FetchRoundRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRoundRecordResponse.ProtoReflect.Descriptor instead.
func (*FetchRoundRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{6}
}

func (x *FetchRoundRecordResponse) GetRoundRecord() []*RoundRecord {
	if x != nil {
		return x.RoundRecord
	}
	return nil
}

// 直播資訊
type LiveStreamParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 串流代碼
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" bson:"code" yaml:"code"`
	// 應用
	App string `protobuf:"bytes,2,opt,name=app,proto3" json:"app" bson:"app" yaml:"app"`
	// 頻道
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel" bson:"channel" yaml:"channel"`
}

func (x *LiveStreamParams) Reset() {
	*x = LiveStreamParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStreamParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStreamParams) ProtoMessage() {}

func (x *LiveStreamParams) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStreamParams.ProtoReflect.Descriptor instead.
func (*LiveStreamParams) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{7}
}

func (x *LiveStreamParams) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LiveStreamParams) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *LiveStreamParams) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

// 遊戲供應
type GameProvide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲供應
	Supplier string `protobuf:"bytes,2,opt,name=supplier,proto3" json:"supplier" bson:"supplier" yaml:"supplier"`
	// 遊戲類型
	GameType string `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"gameType" bson:"gameType" yaml:"gameType"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,4,opt,name=game_subtype,json=gameSubtype,proto3" json:"gameSubtype" bson:"gameSubtype" yaml:"gameSubtype"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 標籤
	Tags map[string]string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"tags" yaml:"tags"`
	// 狀態
	State GameProvideState `protobuf:"varint,17,opt,name=state,proto3,enum=recorder.GameProvideState" json:"state" bson:"state" yaml:"state"`
	// 玩家入座
	Players map[int32]string `protobuf:"bytes,25,rep,name=players,proto3" json:"players" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"players" yaml:"players"`
	// 附加媒體：key: 媒體資源代碼；value: 媒體內容。
	Medias map[string]string `protobuf:"bytes,28,rep,name=medias,proto3" json:"medias" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"medias" yaml:"medias"`
	// 直播參數
	LiveStreams map[string]*LiveStreamParams `protobuf:"bytes,29,rep,name=live_streams,json=liveStreams,proto3" json:"liveStreams" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"liveStreams" yaml:"liveStreams"`
	// 最後一局
	LastRoundCode string `protobuf:"bytes,12,opt,name=last_round_code,json=lastRoundCode,proto3" json:"lastRoundCode" bson:"lastRoundCode" yaml:"lastRoundCode"`
}

func (x *GameProvide) Reset() {
	*x = GameProvide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameProvide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameProvide) ProtoMessage() {}

func (x *GameProvide) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameProvide.ProtoReflect.Descriptor instead.
func (*GameProvide) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{8}
}

func (x *GameProvide) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

func (x *GameProvide) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *GameProvide) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *GameProvide) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *GameProvide) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GameProvide) GetState() GameProvideState {
	if x != nil {
		return x.State
	}
	return GameProvideState_GAME_PROVIDE_STATE_UNSPECIFIED
}

func (x *GameProvide) GetPlayers() map[int32]string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameProvide) GetMedias() map[string]string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GameProvide) GetLiveStreams() map[string]*LiveStreamParams {
	if x != nil {
		return x.LiveStreams
	}
	return nil
}

func (x *GameProvide) GetLastRoundCode() string {
	if x != nil {
		return x.LastRoundCode
	}
	return ""
}

type FetchGameProvideListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform" bson:"platform" yaml:"platform"`
}

func (x *FetchGameProvideListRequest) Reset() {
	*x = FetchGameProvideListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGameProvideListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGameProvideListRequest) ProtoMessage() {}

func (x *FetchGameProvideListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGameProvideListRequest.ProtoReflect.Descriptor instead.
func (*FetchGameProvideListRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{9}
}

func (x *FetchGameProvideListRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type FetchGameProvideListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 桌列表
	GameProvides []*GameProvide `protobuf:"bytes,1,rep,name=game_provides,json=gameProvides,proto3" json:"gameProvides" bson:"gameProvides" yaml:"gameProvides"`
}

func (x *FetchGameProvideListResponse) Reset() {
	*x = FetchGameProvideListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGameProvideListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGameProvideListResponse) ProtoMessage() {}

func (x *FetchGameProvideListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGameProvideListResponse.ProtoReflect.Descriptor instead.
func (*FetchGameProvideListResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{10}
}

func (x *FetchGameProvideListResponse) GetGameProvides() []*GameProvide {
	if x != nil {
		return x.GameProvides
	}
	return nil
}

type CurrentGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 班
	Shift *ShiftRecord `protobuf:"bytes,8,opt,name=shift,proto3,oneof" json:"shift" bson:"shift" yaml:"shift"`
	// 洗牌
	Shoe *ShoeRecord `protobuf:"bytes,11,opt,name=shoe,proto3,oneof" json:"shoe" bson:"shoe" yaml:"shoe"`
	// 遊戲局
	Round *RoundRecord `protobuf:"bytes,12,opt,name=round,proto3,oneof" json:"round" bson:"round" yaml:"round"`
}

func (x *CurrentGame) Reset() {
	*x = CurrentGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentGame) ProtoMessage() {}

func (x *CurrentGame) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentGame.ProtoReflect.Descriptor instead.
func (*CurrentGame) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{11}
}

func (x *CurrentGame) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *CurrentGame) GetShift() *ShiftRecord {
	if x != nil {
		return x.Shift
	}
	return nil
}

func (x *CurrentGame) GetShoe() *ShoeRecord {
	if x != nil {
		return x.Shoe
	}
	return nil
}

func (x *CurrentGame) GetRound() *RoundRecord {
	if x != nil {
		return x.Round
	}
	return nil
}

type FetchCurrentGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查詢的遊戲代號
	GameCodes []string `protobuf:"bytes,1,rep,name=game_codes,json=gameCodes,proto3" json:"gameCodes" yaml:"gameCodes" bson:"gameCodes"`
	// 返回班表資訊
	Shift bool `protobuf:"varint,8,opt,name=shift,proto3" json:"shift" bson:"shift" yaml:"shift"`
	// 返回牌靴資訊
	Shoe bool `protobuf:"varint,10,opt,name=shoe,proto3" json:"shoe" bson:"shoe" yaml:"shoe"`
}

func (x *FetchCurrentGameRequest) Reset() {
	*x = FetchCurrentGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCurrentGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCurrentGameRequest) ProtoMessage() {}

func (x *FetchCurrentGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCurrentGameRequest.ProtoReflect.Descriptor instead.
func (*FetchCurrentGameRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{12}
}

func (x *FetchCurrentGameRequest) GetGameCodes() []string {
	if x != nil {
		return x.GameCodes
	}
	return nil
}

func (x *FetchCurrentGameRequest) GetShift() bool {
	if x != nil {
		return x.Shift
	}
	return false
}

func (x *FetchCurrentGameRequest) GetShoe() bool {
	if x != nil {
		return x.Shoe
	}
	return false
}

type FetchCurrentGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table Code 對應的當下 Current Table
	MapCurrentGames map[string]*CurrentGame `protobuf:"bytes,1,rep,name=map_current_games,json=mapCurrentGames,proto3" json:"mapCurrentGames" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"mapCurrentGames" yaml:"mapCurrentGames"`
	// 時間戳
	Ts *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts" bson:"ts" yaml:"ts"`
}

func (x *FetchCurrentGameResponse) Reset() {
	*x = FetchCurrentGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCurrentGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCurrentGameResponse) ProtoMessage() {}

func (x *FetchCurrentGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCurrentGameResponse.ProtoReflect.Descriptor instead.
func (*FetchCurrentGameResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{13}
}

func (x *FetchCurrentGameResponse) GetMapCurrentGames() map[string]*CurrentGame {
	if x != nil {
		return x.MapCurrentGames
	}
	return nil
}

func (x *FetchCurrentGameResponse) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type FetchGameProvideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform" bson:"platform" yaml:"platform"`
	GameCode string `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
}

func (x *FetchGameProvideRequest) Reset() {
	*x = FetchGameProvideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGameProvideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGameProvideRequest) ProtoMessage() {}

func (x *FetchGameProvideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGameProvideRequest.ProtoReflect.Descriptor instead.
func (*FetchGameProvideRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{14}
}

func (x *FetchGameProvideRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *FetchGameProvideRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

type FetchGameProvideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 桌列表
	GameProvide *GameProvide `protobuf:"bytes,1,opt,name=game_provide,json=gameProvide,proto3" json:"gameProvide" bson:"gameProvide" yaml:"gameProvide"`
}

func (x *FetchGameProvideResponse) Reset() {
	*x = FetchGameProvideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGameProvideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGameProvideResponse) ProtoMessage() {}

func (x *FetchGameProvideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGameProvideResponse.ProtoReflect.Descriptor instead.
func (*FetchGameProvideResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{15}
}

func (x *FetchGameProvideResponse) GetGameProvide() *GameProvide {
	if x != nil {
		return x.GameProvide
	}
	return nil
}

type VerifyGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲代碼
	GameCode string `protobuf:"bytes,1,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 驗證傳送接收的代碼
	Pattern []string `protobuf:"bytes,2,rep,name=pattern,proto3" json:"pattern" bson:"pattern" yaml:"pattern"`
	// 顯示名稱
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" bson:"name" yaml:"name"`
}

func (x *VerifyGameRequest) Reset() {
	*x = VerifyGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyGameRequest) ProtoMessage() {}

func (x *VerifyGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyGameRequest.ProtoReflect.Descriptor instead.
func (*VerifyGameRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{16}
}

func (x *VerifyGameRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *VerifyGameRequest) GetPattern() []string {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *VerifyGameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 標題
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title" bson:"title" yaml:"title"`
	// 副標
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle" bson:"subtitle" yaml:"subtitle"`
	// 內文
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text" bson:"text" yaml:"text"`
	// 附加媒體：key: 媒體資源代碼；value: 媒體內容。
	Medias map[string]string `protobuf:"bytes,4,rep,name=medias,proto3" json:"medias" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"medias" yaml:"medias"`
	// 子文檔
	Sections map[string]*Article `protobuf:"bytes,5,rep,name=sections,proto3" json:"sections" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"sections" yaml:"sections"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{17}
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *Article) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Article) GetMedias() map[string]string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *Article) GetSections() map[string]*Article {
	if x != nil {
		return x.Sections
	}
	return nil
}

type Dealer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代碼
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" bson:"code" yaml:"code"`
	// 名稱
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name" yaml:"name"`
	// 年齡
	Age string `protobuf:"bytes,3,opt,name=age,proto3" json:"age" yaml:"age" bson:"age"`
	// Tags
	Tags map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"tags" yaml:"tags"`
	// 介紹
	Intro *Article `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro" yaml:"intro" bson:"intro"`
	// 貼文
	Posts []*Article `protobuf:"bytes,6,rep,name=posts,proto3" json:"posts" bson:"posts" yaml:"posts"`
}

func (x *Dealer) Reset() {
	*x = Dealer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dealer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dealer) ProtoMessage() {}

func (x *Dealer) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dealer.ProtoReflect.Descriptor instead.
func (*Dealer) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{18}
}

func (x *Dealer) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Dealer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dealer) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *Dealer) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dealer) GetIntro() *Article {
	if x != nil {
		return x.Intro
	}
	return nil
}

func (x *Dealer) GetPosts() []*Article {
	if x != nil {
		return x.Posts
	}
	return nil
}

type GetDealerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 荷官代碼陣列
	DealerCodes []string `protobuf:"bytes,1,rep,name=dealer_codes,json=dealerCodes,proto3" json:"dealerCodes" bson:"dealerCodes" yaml:"dealerCodes"`
}

func (x *GetDealerRequest) Reset() {
	*x = GetDealerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerRequest) ProtoMessage() {}

func (x *GetDealerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerRequest.ProtoReflect.Descriptor instead.
func (*GetDealerRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{19}
}

func (x *GetDealerRequest) GetDealerCodes() []string {
	if x != nil {
		return x.DealerCodes
	}
	return nil
}

type GetDealerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 荷官資料
	Dealers []*Dealer `protobuf:"bytes,1,rep,name=dealers,proto3" json:"dealers" bson:"dealers" yaml:"dealers"`
}

func (x *GetDealerResponse) Reset() {
	*x = GetDealerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerResponse) ProtoMessage() {}

func (x *GetDealerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerResponse.ProtoReflect.Descriptor instead.
func (*GetDealerResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{20}
}

func (x *GetDealerResponse) GetDealers() []*Dealer {
	if x != nil {
		return x.Dealers
	}
	return nil
}

var File_recorder_provider_proto protoreflect.FileDescriptor

var file_recorder_provider_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x74,
	0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x73, 0x54,
	0x6f, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x54, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x6f, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x17,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x52, 0x0a,
	0x10, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0xe5, 0x05, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a,
	0x10, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x1b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x22, 0x5a, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x22, 0xda, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x01, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x48, 0x02, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x68, 0x6f, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x62, 0x0a,
	0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x68, 0x6f, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f,
	0x65, 0x22, 0x86, 0x02, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x1a,
	0x59, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x17, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54,
	0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x22, 0x5e, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3b, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x2a, 0xd7, 0x03,
	0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x06, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x12, 0x1d,
	0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x48, 0x4f,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0d, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x42, 0x45, 0x54, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x45,
	0x54, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x13, 0x2a, 0xfd, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x05, 0x12,
	0x26, 0x0a, 0x22, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x32, 0xc6, 0x04, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x59, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x17, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73,
	0x74, 0x4f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xc4, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x12,
	0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x8f, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2f, 0x77,
	0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62,
	0x67, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x52, 0x58,
	0x58, 0xaa, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xca, 0x02, 0x08, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xe2, 0x02, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_recorder_provider_proto_rawDescOnce sync.Once
	file_recorder_provider_proto_rawDescData = file_recorder_provider_proto_rawDesc
)

func file_recorder_provider_proto_rawDescGZIP() []byte {
	file_recorder_provider_proto_rawDescOnce.Do(func() {
		file_recorder_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_recorder_provider_proto_rawDescData)
	})
	return file_recorder_provider_proto_rawDescData
}

var file_recorder_provider_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_recorder_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_recorder_provider_proto_goTypes = []interface{}{
	(GameNotifyType)(0),                  // 0: recorder.GameNotifyType
	(GameProvideState)(0),                // 1: recorder.GameProvideState
	(*RecordQuery)(nil),                  // 2: recorder.RecordQuery
	(*FetchShiftRecordRequest)(nil),      // 3: recorder.FetchShiftRecordRequest
	(*FetchShiftRecordResponse)(nil),     // 4: recorder.FetchShiftRecordResponse
	(*FetchShoeRecordRequest)(nil),       // 5: recorder.FetchShoeRecordRequest
	(*FetchShoeRecordResponse)(nil),      // 6: recorder.FetchShoeRecordResponse
	(*FetchRoundRecordRequest)(nil),      // 7: recorder.FetchRoundRecordRequest
	(*FetchRoundRecordResponse)(nil),     // 8: recorder.FetchRoundRecordResponse
	(*LiveStreamParams)(nil),             // 9: recorder.LiveStreamParams
	(*GameProvide)(nil),                  // 10: recorder.GameProvide
	(*FetchGameProvideListRequest)(nil),  // 11: recorder.FetchGameProvideListRequest
	(*FetchGameProvideListResponse)(nil), // 12: recorder.FetchGameProvideListResponse
	(*CurrentGame)(nil),                  // 13: recorder.CurrentGame
	(*FetchCurrentGameRequest)(nil),      // 14: recorder.FetchCurrentGameRequest
	(*FetchCurrentGameResponse)(nil),     // 15: recorder.FetchCurrentGameResponse
	(*FetchGameProvideRequest)(nil),      // 16: recorder.FetchGameProvideRequest
	(*FetchGameProvideResponse)(nil),     // 17: recorder.FetchGameProvideResponse
	(*VerifyGameRequest)(nil),            // 18: recorder.VerifyGameRequest
	(*Article)(nil),                      // 19: recorder.Article
	(*Dealer)(nil),                       // 20: recorder.Dealer
	(*GetDealerRequest)(nil),             // 21: recorder.GetDealerRequest
	(*GetDealerResponse)(nil),            // 22: recorder.GetDealerResponse
	nil,                                  // 23: recorder.GameProvide.TagsEntry
	nil,                                  // 24: recorder.GameProvide.PlayersEntry
	nil,                                  // 25: recorder.GameProvide.MediasEntry
	nil,                                  // 26: recorder.GameProvide.LiveStreamsEntry
	nil,                                  // 27: recorder.FetchCurrentGameResponse.MapCurrentGamesEntry
	nil,                                  // 28: recorder.Article.MediasEntry
	nil,                                  // 29: recorder.Article.SectionsEntry
	nil,                                  // 30: recorder.Dealer.TagsEntry
	(*timestamppb.Timestamp)(nil),        // 31: google.protobuf.Timestamp
	(*ShiftRecord)(nil),                  // 32: recorder.ShiftRecord
	(*ShoeRecord)(nil),                   // 33: recorder.ShoeRecord
	(*RoundRecord)(nil),                  // 34: recorder.RoundRecord
}
var file_recorder_provider_proto_depIdxs = []int32{
	31, // 0: recorder.RecordQuery.ts_from:type_name -> google.protobuf.Timestamp
	31, // 1: recorder.RecordQuery.ts_to:type_name -> google.protobuf.Timestamp
	2,  // 2: recorder.FetchShiftRecordRequest.query:type_name -> recorder.RecordQuery
	32, // 3: recorder.FetchShiftRecordResponse.shift_record:type_name -> recorder.ShiftRecord
	2,  // 4: recorder.FetchShoeRecordRequest.query:type_name -> recorder.RecordQuery
	33, // 5: recorder.FetchShoeRecordResponse.shoe_record:type_name -> recorder.ShoeRecord
	2,  // 6: recorder.FetchRoundRecordRequest.query:type_name -> recorder.RecordQuery
	34, // 7: recorder.FetchRoundRecordResponse.round_record:type_name -> recorder.RoundRecord
	23, // 8: recorder.GameProvide.tags:type_name -> recorder.GameProvide.TagsEntry
	1,  // 9: recorder.GameProvide.state:type_name -> recorder.GameProvideState
	24, // 10: recorder.GameProvide.players:type_name -> recorder.GameProvide.PlayersEntry
	25, // 11: recorder.GameProvide.medias:type_name -> recorder.GameProvide.MediasEntry
	26, // 12: recorder.GameProvide.live_streams:type_name -> recorder.GameProvide.LiveStreamsEntry
	10, // 13: recorder.FetchGameProvideListResponse.game_provides:type_name -> recorder.GameProvide
	32, // 14: recorder.CurrentGame.shift:type_name -> recorder.ShiftRecord
	33, // 15: recorder.CurrentGame.shoe:type_name -> recorder.ShoeRecord
	34, // 16: recorder.CurrentGame.round:type_name -> recorder.RoundRecord
	27, // 17: recorder.FetchCurrentGameResponse.map_current_games:type_name -> recorder.FetchCurrentGameResponse.MapCurrentGamesEntry
	31, // 18: recorder.FetchCurrentGameResponse.ts:type_name -> google.protobuf.Timestamp
	10, // 19: recorder.FetchGameProvideResponse.game_provide:type_name -> recorder.GameProvide
	28, // 20: recorder.Article.medias:type_name -> recorder.Article.MediasEntry
	29, // 21: recorder.Article.sections:type_name -> recorder.Article.SectionsEntry
	30, // 22: recorder.Dealer.tags:type_name -> recorder.Dealer.TagsEntry
	19, // 23: recorder.Dealer.intro:type_name -> recorder.Article
	19, // 24: recorder.Dealer.posts:type_name -> recorder.Article
	20, // 25: recorder.GetDealerResponse.dealers:type_name -> recorder.Dealer
	9,  // 26: recorder.GameProvide.LiveStreamsEntry.value:type_name -> recorder.LiveStreamParams
	13, // 27: recorder.FetchCurrentGameResponse.MapCurrentGamesEntry.value:type_name -> recorder.CurrentGame
	19, // 28: recorder.Article.SectionsEntry.value:type_name -> recorder.Article
	3,  // 29: recorder.RecorderReadService.FetchShiftRecord:input_type -> recorder.FetchShiftRecordRequest
	3,  // 30: recorder.RecorderReadService.FetchLastOneShiftRecord:input_type -> recorder.FetchShiftRecordRequest
	5,  // 31: recorder.RecorderReadService.FetchShoeRecord:input_type -> recorder.FetchShoeRecordRequest
	5,  // 32: recorder.RecorderReadService.FetchLastOneShoeRecord:input_type -> recorder.FetchShoeRecordRequest
	7,  // 33: recorder.RecorderReadService.FetchRoundRecord:input_type -> recorder.FetchRoundRecordRequest
	7,  // 34: recorder.RecorderReadService.FetchLastOneRoundRecord:input_type -> recorder.FetchRoundRecordRequest
	11, // 35: recorder.ProviderService.FetchGameProvideList:input_type -> recorder.FetchGameProvideListRequest
	16, // 36: recorder.ProviderService.FetchGameProvide:input_type -> recorder.FetchGameProvideRequest
	14, // 37: recorder.ProviderService.FetchCurrentGame:input_type -> recorder.FetchCurrentGameRequest
	18, // 38: recorder.ProviderService.VerifyGame:input_type -> recorder.VerifyGameRequest
	21, // 39: recorder.ProviderService.GetDealers:input_type -> recorder.GetDealerRequest
	4,  // 40: recorder.RecorderReadService.FetchShiftRecord:output_type -> recorder.FetchShiftRecordResponse
	4,  // 41: recorder.RecorderReadService.FetchLastOneShiftRecord:output_type -> recorder.FetchShiftRecordResponse
	6,  // 42: recorder.RecorderReadService.FetchShoeRecord:output_type -> recorder.FetchShoeRecordResponse
	6,  // 43: recorder.RecorderReadService.FetchLastOneShoeRecord:output_type -> recorder.FetchShoeRecordResponse
	8,  // 44: recorder.RecorderReadService.FetchRoundRecord:output_type -> recorder.FetchRoundRecordResponse
	8,  // 45: recorder.RecorderReadService.FetchLastOneRoundRecord:output_type -> recorder.FetchRoundRecordResponse
	12, // 46: recorder.ProviderService.FetchGameProvideList:output_type -> recorder.FetchGameProvideListResponse
	17, // 47: recorder.ProviderService.FetchGameProvide:output_type -> recorder.FetchGameProvideResponse
	15, // 48: recorder.ProviderService.FetchCurrentGame:output_type -> recorder.FetchCurrentGameResponse
	15, // 49: recorder.ProviderService.VerifyGame:output_type -> recorder.FetchCurrentGameResponse
	22, // 50: recorder.ProviderService.GetDealers:output_type -> recorder.GetDealerResponse
	40, // [40:51] is the sub-list for method output_type
	29, // [29:40] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_recorder_provider_proto_init() }
func file_recorder_provider_proto_init() {
	if File_recorder_provider_proto != nil {
		return
	}
	file_recorder_record_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_recorder_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShiftRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShiftRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShoeRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchShoeRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRoundRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRoundRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStreamParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameProvide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGameProvideListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGameProvideListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCurrentGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCurrentGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGameProvideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGameProvideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dealer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDealerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDealerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recorder_provider_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_recorder_provider_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recorder_provider_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_recorder_provider_proto_goTypes,
		DependencyIndexes: file_recorder_provider_proto_depIdxs,
		EnumInfos:         file_recorder_provider_proto_enumTypes,
		MessageInfos:      file_recorder_provider_proto_msgTypes,
	}.Build()
	File_recorder_provider_proto = out.File
	file_recorder_provider_proto_rawDesc = nil
	file_recorder_provider_proto_goTypes = nil
	file_recorder_provider_proto_depIdxs = nil
}
