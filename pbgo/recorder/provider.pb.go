// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: recorder/provider.proto

package recorder

import (
	games "github.com/wecasino/wecasino-proto/pbgo/games"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameNotifyType int32

const (
	// 未指定
	GameNotifyType_GAME_NOTIFY_TYPE_UNSPECIFIED GameNotifyType = 0
	// 通知遊戲供應狀況改變
	GameNotifyType_NOTIFY_GAME_PROVIDE_STATE_CHANGE GameNotifyType = 1
	// 通知遊戲流程截圖
	GameNotifyType_NOTIFY_GAME_CAPTURE GameNotifyType = 5
	// 通知遊戲流程荷官登入
	GameNotifyType_NOTIFY_GAME_DEALER_LOGIN GameNotifyType = 6
	// 通知遊戲流程荷官登出
	GameNotifyType_NOTIFY_GAME_DEALER_LOGOUT GameNotifyType = 7
	// 通知遊戲流程開始換靴，更換結束呼叫 NOTIFY_SHOE_START
	GameNotifyType_NOTIFY_GAME_CHANGING_SHOE GameNotifyType = 8
	// 通知遊戲班開始
	GameNotifyType_NOTIFY_SHIFT_START GameNotifyType = 9
	// 通知遊戲班結束
	GameNotifyType_NOTIFY_SHIFT_END GameNotifyType = 10
	// 通知新靴開始
	GameNotifyType_NOTIFY_SHOE_START GameNotifyType = 11
	// 通知此靴結束
	GameNotifyType_NOTIFY_SHOE_END GameNotifyType = 12
	// 新局開始
	GameNotifyType_NOTIFY_ROUND_START GameNotifyType = 13
	// 通知遊戲局開始下注
	GameNotifyType_NOTIFY_ROUND_BET GameNotifyType = 14
	// 通知遊戲局結束下注
	GameNotifyType_NOTIFY_ROUND_NO_MORE_BET GameNotifyType = 15
	// 通知遊戲局進行步驟
	GameNotifyType_NOTIFY_ROUND_STEP GameNotifyType = 16
	// 遊戲局完成
	GameNotifyType_NOTIFY_ROUND_FINISH GameNotifyType = 17
	// 通知遊戲局取消
	GameNotifyType_NOTIFY_ROUND_CANCEL GameNotifyType = 18
	// 通知遊戲局回放連結
	GameNotifyType_NOTIFY_ROUND_PLAYBACK GameNotifyType = 19
	// 通知遊戲局事後取消
	GameNotifyType_NOTIFY_ROUND_CANCEL_AFTER_ROUND GameNotifyType = 20
)

// Enum value maps for GameNotifyType.
var (
	GameNotifyType_name = map[int32]string{
		0:  "GAME_NOTIFY_TYPE_UNSPECIFIED",
		1:  "NOTIFY_GAME_PROVIDE_STATE_CHANGE",
		5:  "NOTIFY_GAME_CAPTURE",
		6:  "NOTIFY_GAME_DEALER_LOGIN",
		7:  "NOTIFY_GAME_DEALER_LOGOUT",
		8:  "NOTIFY_GAME_CHANGING_SHOE",
		9:  "NOTIFY_SHIFT_START",
		10: "NOTIFY_SHIFT_END",
		11: "NOTIFY_SHOE_START",
		12: "NOTIFY_SHOE_END",
		13: "NOTIFY_ROUND_START",
		14: "NOTIFY_ROUND_BET",
		15: "NOTIFY_ROUND_NO_MORE_BET",
		16: "NOTIFY_ROUND_STEP",
		17: "NOTIFY_ROUND_FINISH",
		18: "NOTIFY_ROUND_CANCEL",
		19: "NOTIFY_ROUND_PLAYBACK",
		20: "NOTIFY_ROUND_CANCEL_AFTER_ROUND",
	}
	GameNotifyType_value = map[string]int32{
		"GAME_NOTIFY_TYPE_UNSPECIFIED":     0,
		"NOTIFY_GAME_PROVIDE_STATE_CHANGE": 1,
		"NOTIFY_GAME_CAPTURE":              5,
		"NOTIFY_GAME_DEALER_LOGIN":         6,
		"NOTIFY_GAME_DEALER_LOGOUT":        7,
		"NOTIFY_GAME_CHANGING_SHOE":        8,
		"NOTIFY_SHIFT_START":               9,
		"NOTIFY_SHIFT_END":                 10,
		"NOTIFY_SHOE_START":                11,
		"NOTIFY_SHOE_END":                  12,
		"NOTIFY_ROUND_START":               13,
		"NOTIFY_ROUND_BET":                 14,
		"NOTIFY_ROUND_NO_MORE_BET":         15,
		"NOTIFY_ROUND_STEP":                16,
		"NOTIFY_ROUND_FINISH":              17,
		"NOTIFY_ROUND_CANCEL":              18,
		"NOTIFY_ROUND_PLAYBACK":            19,
		"NOTIFY_ROUND_CANCEL_AFTER_ROUND":  20,
	}
)

func (x GameNotifyType) Enum() *GameNotifyType {
	p := new(GameNotifyType)
	*p = x
	return p
}

func (x GameNotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameNotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_recorder_provider_proto_enumTypes[0].Descriptor()
}

func (GameNotifyType) Type() protoreflect.EnumType {
	return &file_recorder_provider_proto_enumTypes[0]
}

func (x GameNotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameNotifyType.Descriptor instead.
func (GameNotifyType) EnumDescriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{0}
}

type GameProvideState int32

const (
	// 未指定
	GameProvideState_GAME_PROVIDE_STATE_UNSPECIFIED GameProvideState = 0
	// 提供
	GameProvideState_GAME_PROVIDE_AVAILABLE GameProvideState = 1
	// 此局結束後維護
	GameProvideState_GAME_PROVIDE_MAINTEN_AFTER_ROUND GameProvideState = 2
	// 維護
	GameProvideState_GAME_PROVIDE_IN_MAINTENANCE GameProvideState = 3
	// 此局結束後關閉
	GameProvideState_GAME_PROVIDE_CLOSE_AFTER_ROUND GameProvideState = 4
	// 此局結束後關閉
	GameProvideState_GAME_PROVIDE_CLOSE GameProvideState = 5
	// 此局結束後關閉
	GameProvideState_GAME_PROVIDE_AVAILABLE_AFTER_ROUND GameProvideState = 6
)

// Enum value maps for GameProvideState.
var (
	GameProvideState_name = map[int32]string{
		0: "GAME_PROVIDE_STATE_UNSPECIFIED",
		1: "GAME_PROVIDE_AVAILABLE",
		2: "GAME_PROVIDE_MAINTEN_AFTER_ROUND",
		3: "GAME_PROVIDE_IN_MAINTENANCE",
		4: "GAME_PROVIDE_CLOSE_AFTER_ROUND",
		5: "GAME_PROVIDE_CLOSE",
		6: "GAME_PROVIDE_AVAILABLE_AFTER_ROUND",
	}
	GameProvideState_value = map[string]int32{
		"GAME_PROVIDE_STATE_UNSPECIFIED":     0,
		"GAME_PROVIDE_AVAILABLE":             1,
		"GAME_PROVIDE_MAINTEN_AFTER_ROUND":   2,
		"GAME_PROVIDE_IN_MAINTENANCE":        3,
		"GAME_PROVIDE_CLOSE_AFTER_ROUND":     4,
		"GAME_PROVIDE_CLOSE":                 5,
		"GAME_PROVIDE_AVAILABLE_AFTER_ROUND": 6,
	}
)

func (x GameProvideState) Enum() *GameProvideState {
	p := new(GameProvideState)
	*p = x
	return p
}

func (x GameProvideState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameProvideState) Descriptor() protoreflect.EnumDescriptor {
	return file_recorder_provider_proto_enumTypes[1].Descriptor()
}

func (GameProvideState) Type() protoreflect.EnumType {
	return &file_recorder_provider_proto_enumTypes[1]
}

func (x GameProvideState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameProvideState.Descriptor instead.
func (GameProvideState) EnumDescriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{1}
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 資源代碼
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetCurrentRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲代碼
	GameCode string `protobuf:"bytes,1,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
}

func (x *GetCurrentRecordRequest) Reset() {
	*x = GetCurrentRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentRecordRequest) ProtoMessage() {}

func (x *GetCurrentRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentRecordRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentRecordRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{1}
}

func (x *GetCurrentRecordRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

type ListRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查詢起時
	TsFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts_from,json=tsFrom,proto3" json:"ts_from,omitempty"`
	// 查詢終時
	TsTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts_to,json=tsTo,proto3" json:"ts_to,omitempty"`
	// 遊戲類型
	GameType *games.GameType `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3,enum=games.GameType,oneof" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype *int32 `protobuf:"varint,4,opt,name=game_subtype,json=gameSubtype,proto3,oneof" json:"game_subtype,omitempty"`
	// 遊戲供應
	Supplier *string `protobuf:"bytes,5,opt,name=supplier,proto3,oneof" json:"supplier,omitempty"`
	// 遊戲代碼
	GameCode *string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3,oneof" json:"game_code,omitempty"`
	// pagination next page
	SearchAfter *string `protobuf:"bytes,8,opt,name=search_after,json=searchAfter,proto3,oneof" json:"search_after,omitempty"`
	// pagination previous page
	SearchBefore *string `protobuf:"bytes,9,opt,name=search_before,json=searchBefore,proto3,oneof" json:"search_before,omitempty"`
	// 頁數 1開始，0表示未填，改為1
	Page int64 `protobuf:"varint,10,opt,name=page,proto3" json:"page,omitempty"`
	// 每頁筆數
	PageSize int64 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListRecordsRequest) Reset() {
	*x = ListRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordsRequest) ProtoMessage() {}

func (x *ListRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListRecordsRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{2}
}

func (x *ListRecordsRequest) GetTsFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TsFrom
	}
	return nil
}

func (x *ListRecordsRequest) GetTsTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TsTo
	}
	return nil
}

func (x *ListRecordsRequest) GetGameType() games.GameType {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return games.GameType(0)
}

func (x *ListRecordsRequest) GetGameSubtype() int32 {
	if x != nil && x.GameSubtype != nil {
		return *x.GameSubtype
	}
	return 0
}

func (x *ListRecordsRequest) GetSupplier() string {
	if x != nil && x.Supplier != nil {
		return *x.Supplier
	}
	return ""
}

func (x *ListRecordsRequest) GetGameCode() string {
	if x != nil && x.GameCode != nil {
		return *x.GameCode
	}
	return ""
}

func (x *ListRecordsRequest) GetSearchAfter() string {
	if x != nil && x.SearchAfter != nil {
		return *x.SearchAfter
	}
	return ""
}

func (x *ListRecordsRequest) GetSearchBefore() string {
	if x != nil && x.SearchBefore != nil {
		return *x.SearchBefore
	}
	return ""
}

func (x *ListRecordsRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRecordsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListShiftsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shifts
	ShiftRecord []*ShiftRecord `protobuf:"bytes,1,rep,name=shift_record,json=shiftRecord,proto3" json:"shift_record,omitempty"`
	// 總數
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListShiftsResponse) Reset() {
	*x = ListShiftsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShiftsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftsResponse) ProtoMessage() {}

func (x *ListShiftsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftsResponse.ProtoReflect.Descriptor instead.
func (*ListShiftsResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{3}
}

func (x *ListShiftsResponse) GetShiftRecord() []*ShiftRecord {
	if x != nil {
		return x.ShiftRecord
	}
	return nil
}

func (x *ListShiftsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListShoesRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shoes
	ShoeRecord []*ShoeRecord `protobuf:"bytes,1,rep,name=shoe_record,json=shoeRecord,proto3" json:"shoe_record,omitempty"`
	// 總數
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListShoesRecordResponse) Reset() {
	*x = ListShoesRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShoesRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShoesRecordResponse) ProtoMessage() {}

func (x *ListShoesRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShoesRecordResponse.ProtoReflect.Descriptor instead.
func (*ListShoesRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{4}
}

func (x *ListShoesRecordResponse) GetShoeRecord() []*ShoeRecord {
	if x != nil {
		return x.ShoeRecord
	}
	return nil
}

func (x *ListShoesRecordResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListRoundsRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rounds
	RoundRecord []*RoundRecord `protobuf:"bytes,1,rep,name=round_record,json=roundRecord,proto3" json:"round_record,omitempty"`
	// 總數
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListRoundsRecordResponse) Reset() {
	*x = ListRoundsRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoundsRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoundsRecordResponse) ProtoMessage() {}

func (x *ListRoundsRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoundsRecordResponse.ProtoReflect.Descriptor instead.
func (*ListRoundsRecordResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{5}
}

func (x *ListRoundsRecordResponse) GetRoundRecord() []*RoundRecord {
	if x != nil {
		return x.RoundRecord
	}
	return nil
}

func (x *ListRoundsRecordResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 直播資訊
type LiveStreamParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 串流代碼
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 應用
	App string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	// 頻道
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *LiveStreamParams) Reset() {
	*x = LiveStreamParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStreamParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStreamParams) ProtoMessage() {}

func (x *LiveStreamParams) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStreamParams.ProtoReflect.Descriptor instead.
func (*LiveStreamParams) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{6}
}

func (x *LiveStreamParams) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LiveStreamParams) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *LiveStreamParams) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

// 遊戲供應
type GameProvide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲供應
	Supplier string `protobuf:"bytes,2,opt,name=supplier,proto3" json:"supplier,omitempty"`
	// 遊戲類型
	GameType string `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,4,opt,name=game_subtype,json=gameSubtype,proto3" json:"game_subtype,omitempty"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	// 標籤
	Tags map[string]string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 狀態
	State GameProvideState `protobuf:"varint,17,opt,name=state,proto3,enum=recorder.GameProvideState" json:"state,omitempty"`
	// 玩家入座
	Players map[int32]string `protobuf:"bytes,25,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 玩家姓名
	PlayersName map[string]string `protobuf:"bytes,30,rep,name=players_name,json=playersName,proto3" json:"players_name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 附加媒體：key: 媒體資源代碼；value: 媒體內容。
	Medias map[string]string `protobuf:"bytes,28,rep,name=medias,proto3" json:"medias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 直播參數
	LiveStreams map[string]*LiveStreamParams `protobuf:"bytes,29,rep,name=live_streams,json=liveStreams,proto3" json:"live_streams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 最後一局
	LastRoundCode string `protobuf:"bytes,12,opt,name=last_round_code,json=lastRoundCode,proto3" json:"last_round_code,omitempty"`
}

func (x *GameProvide) Reset() {
	*x = GameProvide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameProvide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameProvide) ProtoMessage() {}

func (x *GameProvide) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameProvide.ProtoReflect.Descriptor instead.
func (*GameProvide) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{7}
}

func (x *GameProvide) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

func (x *GameProvide) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *GameProvide) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *GameProvide) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *GameProvide) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GameProvide) GetState() GameProvideState {
	if x != nil {
		return x.State
	}
	return GameProvideState_GAME_PROVIDE_STATE_UNSPECIFIED
}

func (x *GameProvide) GetPlayers() map[int32]string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameProvide) GetPlayersName() map[string]string {
	if x != nil {
		return x.PlayersName
	}
	return nil
}

func (x *GameProvide) GetMedias() map[string]string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GameProvide) GetLiveStreams() map[string]*LiveStreamParams {
	if x != nil {
		return x.LiveStreams
	}
	return nil
}

func (x *GameProvide) GetLastRoundCode() string {
	if x != nil {
		return x.LastRoundCode
	}
	return ""
}

type ListGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListGamesRequest) Reset() {
	*x = ListGamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGamesRequest) ProtoMessage() {}

func (x *ListGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGamesRequest.ProtoReflect.Descriptor instead.
func (*ListGamesRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{8}
}

type ListGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲列表
	GameProvides []*GameProvide `protobuf:"bytes,1,rep,name=game_provides,json=gameProvides,proto3" json:"game_provides,omitempty"`
}

func (x *ListGamesResponse) Reset() {
	*x = ListGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGamesResponse) ProtoMessage() {}

func (x *ListGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGamesResponse.ProtoReflect.Descriptor instead.
func (*ListGamesResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{9}
}

func (x *ListGamesResponse) GetGameProvides() []*GameProvide {
	if x != nil {
		return x.GameProvides
	}
	return nil
}

type VerifyGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 遊戲代碼
	GameCode string `protobuf:"bytes,1,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	// 驗證傳送接收的代碼
	Pattern []string `protobuf:"bytes,2,rep,name=pattern,proto3" json:"pattern,omitempty"`
	// 顯示名稱
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VerifyGameRequest) Reset() {
	*x = VerifyGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyGameRequest) ProtoMessage() {}

func (x *VerifyGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyGameRequest.ProtoReflect.Descriptor instead.
func (*VerifyGameRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyGameRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *VerifyGameRequest) GetPattern() []string {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *VerifyGameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 標題
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 副標
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 內文
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// 附加媒體：key: 媒體資源代碼；value: 媒體內容。
	Medias map[string]string `protobuf:"bytes,4,rep,name=medias,proto3" json:"medias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 子文檔
	Sections map[string]*Article `protobuf:"bytes,5,rep,name=sections,proto3" json:"sections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{11}
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *Article) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Article) GetMedias() map[string]string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *Article) GetSections() map[string]*Article {
	if x != nil {
		return x.Sections
	}
	return nil
}

type Dealer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代碼
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 名稱
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 年齡
	Age string `protobuf:"bytes,3,opt,name=age,proto3" json:"age,omitempty"`
	// Tags
	Tags map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 介紹
	Intro *Article `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	// 貼文
	Posts []*Article `protobuf:"bytes,6,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *Dealer) Reset() {
	*x = Dealer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dealer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dealer) ProtoMessage() {}

func (x *Dealer) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dealer.ProtoReflect.Descriptor instead.
func (*Dealer) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{12}
}

func (x *Dealer) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Dealer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dealer) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *Dealer) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dealer) GetIntro() *Article {
	if x != nil {
		return x.Intro
	}
	return nil
}

func (x *Dealer) GetPosts() []*Article {
	if x != nil {
		return x.Posts
	}
	return nil
}

type ListDealersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代碼陣列
	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
	// 開始
	Skip int64 `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	// 筆數 預設 100
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListDealersRequest) Reset() {
	*x = ListDealersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDealersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDealersRequest) ProtoMessage() {}

func (x *ListDealersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDealersRequest.ProtoReflect.Descriptor instead.
func (*ListDealersRequest) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{13}
}

func (x *ListDealersRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *ListDealersRequest) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ListDealersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListDealersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 荷官資料
	Dealers []*Dealer `protobuf:"bytes,1,rep,name=dealers,proto3" json:"dealers,omitempty"`
}

func (x *ListDealersResponse) Reset() {
	*x = ListDealersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_provider_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDealersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDealersResponse) ProtoMessage() {}

func (x *ListDealersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_provider_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDealersResponse.ProtoReflect.Descriptor instead.
func (*ListDealersResponse) Descriptor() ([]byte, []int) {
	return file_recorder_provider_proto_rawDescGZIP(), []int{14}
}

func (x *ListDealersResponse) GetDealers() []*Dealer {
	if x != nil {
		return x.Dealers
	}
	return nil
}

var File_recorder_provider_proto protoreflect.FileDescriptor

var file_recorder_provider_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x3b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf8,
	0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x73,
	0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x73, 0x54, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x64, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x66, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x52, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xf0, 0x06, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a,
	0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x22,
	0x5e, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xce, 0x02, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x35, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4e, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfd, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x27,
	0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x54, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x41, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x2a, 0xfc, 0x03, 0x0a, 0x0e, 0x47, 0x61,
	0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x09, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0b, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x5f, 0x45, 0x4e,
	0x44, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x54, 0x10,
	0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x0f, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x45, 0x50, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x11, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x13, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x14, 0x2a, 0xfd, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x05,
	0x12, 0x26, 0x0a, 0x22, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x32, 0xb9, 0x07, 0x0a, 0x13, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x65, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x1c,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x64, 0x65, 0x7d, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x3a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x6f, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x6f, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x68, 0x6f, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x68, 0x6f,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x68, 0x6f, 0x65, 0x73,
	0x3a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x64,
	0x65, 0x7d, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x32, 0x88, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x12, 0x73, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x7d, 0x3a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x68, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x42,
	0x9e, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x63,
	0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2f, 0x77, 0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0xca, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xe2, 0x02,
	0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recorder_provider_proto_rawDescOnce sync.Once
	file_recorder_provider_proto_rawDescData = file_recorder_provider_proto_rawDesc
)

func file_recorder_provider_proto_rawDescGZIP() []byte {
	file_recorder_provider_proto_rawDescOnce.Do(func() {
		file_recorder_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_recorder_provider_proto_rawDescData)
	})
	return file_recorder_provider_proto_rawDescData
}

var file_recorder_provider_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_recorder_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_recorder_provider_proto_goTypes = []interface{}{
	(GameNotifyType)(0),              // 0: recorder.GameNotifyType
	(GameProvideState)(0),            // 1: recorder.GameProvideState
	(*GetRequest)(nil),               // 2: recorder.GetRequest
	(*GetCurrentRecordRequest)(nil),  // 3: recorder.GetCurrentRecordRequest
	(*ListRecordsRequest)(nil),       // 4: recorder.ListRecordsRequest
	(*ListShiftsResponse)(nil),       // 5: recorder.ListShiftsResponse
	(*ListShoesRecordResponse)(nil),  // 6: recorder.ListShoesRecordResponse
	(*ListRoundsRecordResponse)(nil), // 7: recorder.ListRoundsRecordResponse
	(*LiveStreamParams)(nil),         // 8: recorder.LiveStreamParams
	(*GameProvide)(nil),              // 9: recorder.GameProvide
	(*ListGamesRequest)(nil),         // 10: recorder.ListGamesRequest
	(*ListGamesResponse)(nil),        // 11: recorder.ListGamesResponse
	(*VerifyGameRequest)(nil),        // 12: recorder.VerifyGameRequest
	(*Article)(nil),                  // 13: recorder.Article
	(*Dealer)(nil),                   // 14: recorder.Dealer
	(*ListDealersRequest)(nil),       // 15: recorder.ListDealersRequest
	(*ListDealersResponse)(nil),      // 16: recorder.ListDealersResponse
	nil,                              // 17: recorder.GameProvide.TagsEntry
	nil,                              // 18: recorder.GameProvide.PlayersEntry
	nil,                              // 19: recorder.GameProvide.PlayersNameEntry
	nil,                              // 20: recorder.GameProvide.MediasEntry
	nil,                              // 21: recorder.GameProvide.LiveStreamsEntry
	nil,                              // 22: recorder.Article.MediasEntry
	nil,                              // 23: recorder.Article.SectionsEntry
	nil,                              // 24: recorder.Dealer.TagsEntry
	(*timestamppb.Timestamp)(nil),    // 25: google.protobuf.Timestamp
	(games.GameType)(0),              // 26: games.GameType
	(*ShiftRecord)(nil),              // 27: recorder.ShiftRecord
	(*ShoeRecord)(nil),               // 28: recorder.ShoeRecord
	(*RoundRecord)(nil),              // 29: recorder.RoundRecord
	(*emptypb.Empty)(nil),            // 30: google.protobuf.Empty
}
var file_recorder_provider_proto_depIdxs = []int32{
	25, // 0: recorder.ListRecordsRequest.ts_from:type_name -> google.protobuf.Timestamp
	25, // 1: recorder.ListRecordsRequest.ts_to:type_name -> google.protobuf.Timestamp
	26, // 2: recorder.ListRecordsRequest.game_type:type_name -> games.GameType
	27, // 3: recorder.ListShiftsResponse.shift_record:type_name -> recorder.ShiftRecord
	28, // 4: recorder.ListShoesRecordResponse.shoe_record:type_name -> recorder.ShoeRecord
	29, // 5: recorder.ListRoundsRecordResponse.round_record:type_name -> recorder.RoundRecord
	17, // 6: recorder.GameProvide.tags:type_name -> recorder.GameProvide.TagsEntry
	1,  // 7: recorder.GameProvide.state:type_name -> recorder.GameProvideState
	18, // 8: recorder.GameProvide.players:type_name -> recorder.GameProvide.PlayersEntry
	19, // 9: recorder.GameProvide.players_name:type_name -> recorder.GameProvide.PlayersNameEntry
	20, // 10: recorder.GameProvide.medias:type_name -> recorder.GameProvide.MediasEntry
	21, // 11: recorder.GameProvide.live_streams:type_name -> recorder.GameProvide.LiveStreamsEntry
	9,  // 12: recorder.ListGamesResponse.game_provides:type_name -> recorder.GameProvide
	22, // 13: recorder.Article.medias:type_name -> recorder.Article.MediasEntry
	23, // 14: recorder.Article.sections:type_name -> recorder.Article.SectionsEntry
	24, // 15: recorder.Dealer.tags:type_name -> recorder.Dealer.TagsEntry
	13, // 16: recorder.Dealer.intro:type_name -> recorder.Article
	13, // 17: recorder.Dealer.posts:type_name -> recorder.Article
	14, // 18: recorder.ListDealersResponse.dealers:type_name -> recorder.Dealer
	8,  // 19: recorder.GameProvide.LiveStreamsEntry.value:type_name -> recorder.LiveStreamParams
	13, // 20: recorder.Article.SectionsEntry.value:type_name -> recorder.Article
	4,  // 21: recorder.RecorderReadService.ListShifts:input_type -> recorder.ListRecordsRequest
	2,  // 22: recorder.RecorderReadService.GetShift:input_type -> recorder.GetRequest
	3,  // 23: recorder.RecorderReadService.GetCurrentShift:input_type -> recorder.GetCurrentRecordRequest
	4,  // 24: recorder.RecorderReadService.ListShoe:input_type -> recorder.ListRecordsRequest
	2,  // 25: recorder.RecorderReadService.GetShoe:input_type -> recorder.GetRequest
	3,  // 26: recorder.RecorderReadService.GetCurrentShoe:input_type -> recorder.GetCurrentRecordRequest
	4,  // 27: recorder.RecorderReadService.ListRounds:input_type -> recorder.ListRecordsRequest
	2,  // 28: recorder.RecorderReadService.GetRound:input_type -> recorder.GetRequest
	3,  // 29: recorder.RecorderReadService.GetCurrentRound:input_type -> recorder.GetCurrentRecordRequest
	10, // 30: recorder.ProviderService.ListGames:input_type -> recorder.ListGamesRequest
	2,  // 31: recorder.ProviderService.GetGames:input_type -> recorder.GetRequest
	12, // 32: recorder.ProviderService.VerifyGame:input_type -> recorder.VerifyGameRequest
	15, // 33: recorder.ProviderService.ListDealers:input_type -> recorder.ListDealersRequest
	2,  // 34: recorder.ProviderService.GetDealer:input_type -> recorder.GetRequest
	5,  // 35: recorder.RecorderReadService.ListShifts:output_type -> recorder.ListShiftsResponse
	27, // 36: recorder.RecorderReadService.GetShift:output_type -> recorder.ShiftRecord
	27, // 37: recorder.RecorderReadService.GetCurrentShift:output_type -> recorder.ShiftRecord
	6,  // 38: recorder.RecorderReadService.ListShoe:output_type -> recorder.ListShoesRecordResponse
	28, // 39: recorder.RecorderReadService.GetShoe:output_type -> recorder.ShoeRecord
	28, // 40: recorder.RecorderReadService.GetCurrentShoe:output_type -> recorder.ShoeRecord
	7,  // 41: recorder.RecorderReadService.ListRounds:output_type -> recorder.ListRoundsRecordResponse
	29, // 42: recorder.RecorderReadService.GetRound:output_type -> recorder.RoundRecord
	29, // 43: recorder.RecorderReadService.GetCurrentRound:output_type -> recorder.RoundRecord
	11, // 44: recorder.ProviderService.ListGames:output_type -> recorder.ListGamesResponse
	9,  // 45: recorder.ProviderService.GetGames:output_type -> recorder.GameProvide
	30, // 46: recorder.ProviderService.VerifyGame:output_type -> google.protobuf.Empty
	16, // 47: recorder.ProviderService.ListDealers:output_type -> recorder.ListDealersResponse
	14, // 48: recorder.ProviderService.GetDealer:output_type -> recorder.Dealer
	35, // [35:49] is the sub-list for method output_type
	21, // [21:35] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_recorder_provider_proto_init() }
func file_recorder_provider_proto_init() {
	if File_recorder_provider_proto != nil {
		return
	}
	file_recorder_record_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_recorder_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShiftsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShoesRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoundsRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStreamParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameProvide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dealer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDealersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_provider_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDealersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recorder_provider_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recorder_provider_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_recorder_provider_proto_goTypes,
		DependencyIndexes: file_recorder_provider_proto_depIdxs,
		EnumInfos:         file_recorder_provider_proto_enumTypes,
		MessageInfos:      file_recorder_provider_proto_msgTypes,
	}.Build()
	File_recorder_provider_proto = out.File
	file_recorder_provider_proto_rawDesc = nil
	file_recorder_provider_proto_goTypes = nil
	file_recorder_provider_proto_depIdxs = nil
}
