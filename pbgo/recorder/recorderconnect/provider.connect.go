// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: recorder/provider.proto

package recorderconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	recorder "github.com/wecasino/wecasino-proto/pbgo/recorder"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RecorderReadServiceName is the fully-qualified name of the RecorderReadService service.
	RecorderReadServiceName = "recorder.RecorderReadService"
	// ProviderServiceName is the fully-qualified name of the ProviderService service.
	ProviderServiceName = "recorder.ProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RecorderReadServiceListShiftsProcedure is the fully-qualified name of the RecorderReadService's
	// ListShifts RPC.
	RecorderReadServiceListShiftsProcedure = "/recorder.RecorderReadService/ListShifts"
	// RecorderReadServiceGetShiftProcedure is the fully-qualified name of the RecorderReadService's
	// GetShift RPC.
	RecorderReadServiceGetShiftProcedure = "/recorder.RecorderReadService/GetShift"
	// RecorderReadServiceGetCurrentShiftProcedure is the fully-qualified name of the
	// RecorderReadService's GetCurrentShift RPC.
	RecorderReadServiceGetCurrentShiftProcedure = "/recorder.RecorderReadService/GetCurrentShift"
	// RecorderReadServiceListShoeProcedure is the fully-qualified name of the RecorderReadService's
	// ListShoe RPC.
	RecorderReadServiceListShoeProcedure = "/recorder.RecorderReadService/ListShoe"
	// RecorderReadServiceGetShoeProcedure is the fully-qualified name of the RecorderReadService's
	// GetShoe RPC.
	RecorderReadServiceGetShoeProcedure = "/recorder.RecorderReadService/GetShoe"
	// RecorderReadServiceGetCurrentShoeProcedure is the fully-qualified name of the
	// RecorderReadService's GetCurrentShoe RPC.
	RecorderReadServiceGetCurrentShoeProcedure = "/recorder.RecorderReadService/GetCurrentShoe"
	// RecorderReadServiceListRoundsProcedure is the fully-qualified name of the RecorderReadService's
	// ListRounds RPC.
	RecorderReadServiceListRoundsProcedure = "/recorder.RecorderReadService/ListRounds"
	// RecorderReadServiceGetRoundProcedure is the fully-qualified name of the RecorderReadService's
	// GetRound RPC.
	RecorderReadServiceGetRoundProcedure = "/recorder.RecorderReadService/GetRound"
	// RecorderReadServiceGetCurrentRoundProcedure is the fully-qualified name of the
	// RecorderReadService's GetCurrentRound RPC.
	RecorderReadServiceGetCurrentRoundProcedure = "/recorder.RecorderReadService/GetCurrentRound"
	// RecorderReadServiceGetPlayBackRoundProcedure is the fully-qualified name of the
	// RecorderReadService's GetPlayBackRound RPC.
	RecorderReadServiceGetPlayBackRoundProcedure = "/recorder.RecorderReadService/GetPlayBackRound"
	// ProviderServiceListGamesProcedure is the fully-qualified name of the ProviderService's ListGames
	// RPC.
	ProviderServiceListGamesProcedure = "/recorder.ProviderService/ListGames"
	// ProviderServiceGetGamesProcedure is the fully-qualified name of the ProviderService's GetGames
	// RPC.
	ProviderServiceGetGamesProcedure = "/recorder.ProviderService/GetGames"
	// ProviderServiceVerifyGameProcedure is the fully-qualified name of the ProviderService's
	// VerifyGame RPC.
	ProviderServiceVerifyGameProcedure = "/recorder.ProviderService/VerifyGame"
	// ProviderServiceListDealersProcedure is the fully-qualified name of the ProviderService's
	// ListDealers RPC.
	ProviderServiceListDealersProcedure = "/recorder.ProviderService/ListDealers"
	// ProviderServiceGetDealerProcedure is the fully-qualified name of the ProviderService's GetDealer
	// RPC.
	ProviderServiceGetDealerProcedure = "/recorder.ProviderService/GetDealer"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	recorderReadServiceServiceDescriptor                = recorder.File_recorder_provider_proto.Services().ByName("RecorderReadService")
	recorderReadServiceListShiftsMethodDescriptor       = recorderReadServiceServiceDescriptor.Methods().ByName("ListShifts")
	recorderReadServiceGetShiftMethodDescriptor         = recorderReadServiceServiceDescriptor.Methods().ByName("GetShift")
	recorderReadServiceGetCurrentShiftMethodDescriptor  = recorderReadServiceServiceDescriptor.Methods().ByName("GetCurrentShift")
	recorderReadServiceListShoeMethodDescriptor         = recorderReadServiceServiceDescriptor.Methods().ByName("ListShoe")
	recorderReadServiceGetShoeMethodDescriptor          = recorderReadServiceServiceDescriptor.Methods().ByName("GetShoe")
	recorderReadServiceGetCurrentShoeMethodDescriptor   = recorderReadServiceServiceDescriptor.Methods().ByName("GetCurrentShoe")
	recorderReadServiceListRoundsMethodDescriptor       = recorderReadServiceServiceDescriptor.Methods().ByName("ListRounds")
	recorderReadServiceGetRoundMethodDescriptor         = recorderReadServiceServiceDescriptor.Methods().ByName("GetRound")
	recorderReadServiceGetCurrentRoundMethodDescriptor  = recorderReadServiceServiceDescriptor.Methods().ByName("GetCurrentRound")
	recorderReadServiceGetPlayBackRoundMethodDescriptor = recorderReadServiceServiceDescriptor.Methods().ByName("GetPlayBackRound")
	providerServiceServiceDescriptor                    = recorder.File_recorder_provider_proto.Services().ByName("ProviderService")
	providerServiceListGamesMethodDescriptor            = providerServiceServiceDescriptor.Methods().ByName("ListGames")
	providerServiceGetGamesMethodDescriptor             = providerServiceServiceDescriptor.Methods().ByName("GetGames")
	providerServiceVerifyGameMethodDescriptor           = providerServiceServiceDescriptor.Methods().ByName("VerifyGame")
	providerServiceListDealersMethodDescriptor          = providerServiceServiceDescriptor.Methods().ByName("ListDealers")
	providerServiceGetDealerMethodDescriptor            = providerServiceServiceDescriptor.Methods().ByName("GetDealer")
)

// RecorderReadServiceClient is a client for the recorder.RecorderReadService service.
type RecorderReadServiceClient interface {
	// 讀取班次紀錄List
	ListShifts(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShiftsResponse], error)
	// 讀取指定班次紀錄
	GetShift(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShiftRecord], error)
	// 讀取目前班次紀錄
	GetCurrentShift(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShiftRecord], error)
	// 讀牌靴紀錄list
	ListShoe(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShoesRecordResponse], error)
	// 讀取指定靴紀錄
	GetShoe(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShoeRecord], error)
	// 讀取目前靴紀錄
	GetCurrentShoe(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShoeRecord], error)
	// 讀牌局紀錄list
	ListRounds(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListRoundsRecordResponse], error)
	// 讀取指定局紀錄
	GetRound(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.RoundRecord], error)
	// 讀取目前局紀錄
	GetCurrentRound(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.RoundRecord], error)
	GetPlayBackRound(context.Context, *connect.Request[recorder.GetRoundPlayBackRequest]) (*connect.Response[recorder.GetRoundPlayBackResponse], error)
}

// NewRecorderReadServiceClient constructs a client for the recorder.RecorderReadService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecorderReadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecorderReadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recorderReadServiceClient{
		listShifts: connect.NewClient[recorder.ListRecordsRequest, recorder.ListShiftsResponse](
			httpClient,
			baseURL+RecorderReadServiceListShiftsProcedure,
			connect.WithSchema(recorderReadServiceListShiftsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getShift: connect.NewClient[recorder.GetRequest, recorder.ShiftRecord](
			httpClient,
			baseURL+RecorderReadServiceGetShiftProcedure,
			connect.WithSchema(recorderReadServiceGetShiftMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCurrentShift: connect.NewClient[recorder.GetCurrentRecordRequest, recorder.ShiftRecord](
			httpClient,
			baseURL+RecorderReadServiceGetCurrentShiftProcedure,
			connect.WithSchema(recorderReadServiceGetCurrentShiftMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listShoe: connect.NewClient[recorder.ListRecordsRequest, recorder.ListShoesRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceListShoeProcedure,
			connect.WithSchema(recorderReadServiceListShoeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getShoe: connect.NewClient[recorder.GetRequest, recorder.ShoeRecord](
			httpClient,
			baseURL+RecorderReadServiceGetShoeProcedure,
			connect.WithSchema(recorderReadServiceGetShoeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCurrentShoe: connect.NewClient[recorder.GetCurrentRecordRequest, recorder.ShoeRecord](
			httpClient,
			baseURL+RecorderReadServiceGetCurrentShoeProcedure,
			connect.WithSchema(recorderReadServiceGetCurrentShoeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRounds: connect.NewClient[recorder.ListRecordsRequest, recorder.ListRoundsRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceListRoundsProcedure,
			connect.WithSchema(recorderReadServiceListRoundsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRound: connect.NewClient[recorder.GetRequest, recorder.RoundRecord](
			httpClient,
			baseURL+RecorderReadServiceGetRoundProcedure,
			connect.WithSchema(recorderReadServiceGetRoundMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCurrentRound: connect.NewClient[recorder.GetCurrentRecordRequest, recorder.RoundRecord](
			httpClient,
			baseURL+RecorderReadServiceGetCurrentRoundProcedure,
			connect.WithSchema(recorderReadServiceGetCurrentRoundMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPlayBackRound: connect.NewClient[recorder.GetRoundPlayBackRequest, recorder.GetRoundPlayBackResponse](
			httpClient,
			baseURL+RecorderReadServiceGetPlayBackRoundProcedure,
			connect.WithSchema(recorderReadServiceGetPlayBackRoundMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// recorderReadServiceClient implements RecorderReadServiceClient.
type recorderReadServiceClient struct {
	listShifts       *connect.Client[recorder.ListRecordsRequest, recorder.ListShiftsResponse]
	getShift         *connect.Client[recorder.GetRequest, recorder.ShiftRecord]
	getCurrentShift  *connect.Client[recorder.GetCurrentRecordRequest, recorder.ShiftRecord]
	listShoe         *connect.Client[recorder.ListRecordsRequest, recorder.ListShoesRecordResponse]
	getShoe          *connect.Client[recorder.GetRequest, recorder.ShoeRecord]
	getCurrentShoe   *connect.Client[recorder.GetCurrentRecordRequest, recorder.ShoeRecord]
	listRounds       *connect.Client[recorder.ListRecordsRequest, recorder.ListRoundsRecordResponse]
	getRound         *connect.Client[recorder.GetRequest, recorder.RoundRecord]
	getCurrentRound  *connect.Client[recorder.GetCurrentRecordRequest, recorder.RoundRecord]
	getPlayBackRound *connect.Client[recorder.GetRoundPlayBackRequest, recorder.GetRoundPlayBackResponse]
}

// ListShifts calls recorder.RecorderReadService.ListShifts.
func (c *recorderReadServiceClient) ListShifts(ctx context.Context, req *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShiftsResponse], error) {
	return c.listShifts.CallUnary(ctx, req)
}

// GetShift calls recorder.RecorderReadService.GetShift.
func (c *recorderReadServiceClient) GetShift(ctx context.Context, req *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShiftRecord], error) {
	return c.getShift.CallUnary(ctx, req)
}

// GetCurrentShift calls recorder.RecorderReadService.GetCurrentShift.
func (c *recorderReadServiceClient) GetCurrentShift(ctx context.Context, req *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShiftRecord], error) {
	return c.getCurrentShift.CallUnary(ctx, req)
}

// ListShoe calls recorder.RecorderReadService.ListShoe.
func (c *recorderReadServiceClient) ListShoe(ctx context.Context, req *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShoesRecordResponse], error) {
	return c.listShoe.CallUnary(ctx, req)
}

// GetShoe calls recorder.RecorderReadService.GetShoe.
func (c *recorderReadServiceClient) GetShoe(ctx context.Context, req *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShoeRecord], error) {
	return c.getShoe.CallUnary(ctx, req)
}

// GetCurrentShoe calls recorder.RecorderReadService.GetCurrentShoe.
func (c *recorderReadServiceClient) GetCurrentShoe(ctx context.Context, req *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShoeRecord], error) {
	return c.getCurrentShoe.CallUnary(ctx, req)
}

// ListRounds calls recorder.RecorderReadService.ListRounds.
func (c *recorderReadServiceClient) ListRounds(ctx context.Context, req *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListRoundsRecordResponse], error) {
	return c.listRounds.CallUnary(ctx, req)
}

// GetRound calls recorder.RecorderReadService.GetRound.
func (c *recorderReadServiceClient) GetRound(ctx context.Context, req *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.RoundRecord], error) {
	return c.getRound.CallUnary(ctx, req)
}

// GetCurrentRound calls recorder.RecorderReadService.GetCurrentRound.
func (c *recorderReadServiceClient) GetCurrentRound(ctx context.Context, req *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.RoundRecord], error) {
	return c.getCurrentRound.CallUnary(ctx, req)
}

// GetPlayBackRound calls recorder.RecorderReadService.GetPlayBackRound.
func (c *recorderReadServiceClient) GetPlayBackRound(ctx context.Context, req *connect.Request[recorder.GetRoundPlayBackRequest]) (*connect.Response[recorder.GetRoundPlayBackResponse], error) {
	return c.getPlayBackRound.CallUnary(ctx, req)
}

// RecorderReadServiceHandler is an implementation of the recorder.RecorderReadService service.
type RecorderReadServiceHandler interface {
	// 讀取班次紀錄List
	ListShifts(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShiftsResponse], error)
	// 讀取指定班次紀錄
	GetShift(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShiftRecord], error)
	// 讀取目前班次紀錄
	GetCurrentShift(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShiftRecord], error)
	// 讀牌靴紀錄list
	ListShoe(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShoesRecordResponse], error)
	// 讀取指定靴紀錄
	GetShoe(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShoeRecord], error)
	// 讀取目前靴紀錄
	GetCurrentShoe(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShoeRecord], error)
	// 讀牌局紀錄list
	ListRounds(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListRoundsRecordResponse], error)
	// 讀取指定局紀錄
	GetRound(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.RoundRecord], error)
	// 讀取目前局紀錄
	GetCurrentRound(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.RoundRecord], error)
	GetPlayBackRound(context.Context, *connect.Request[recorder.GetRoundPlayBackRequest]) (*connect.Response[recorder.GetRoundPlayBackResponse], error)
}

// NewRecorderReadServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecorderReadServiceHandler(svc RecorderReadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recorderReadServiceListShiftsHandler := connect.NewUnaryHandler(
		RecorderReadServiceListShiftsProcedure,
		svc.ListShifts,
		connect.WithSchema(recorderReadServiceListShiftsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceGetShiftHandler := connect.NewUnaryHandler(
		RecorderReadServiceGetShiftProcedure,
		svc.GetShift,
		connect.WithSchema(recorderReadServiceGetShiftMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceGetCurrentShiftHandler := connect.NewUnaryHandler(
		RecorderReadServiceGetCurrentShiftProcedure,
		svc.GetCurrentShift,
		connect.WithSchema(recorderReadServiceGetCurrentShiftMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceListShoeHandler := connect.NewUnaryHandler(
		RecorderReadServiceListShoeProcedure,
		svc.ListShoe,
		connect.WithSchema(recorderReadServiceListShoeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceGetShoeHandler := connect.NewUnaryHandler(
		RecorderReadServiceGetShoeProcedure,
		svc.GetShoe,
		connect.WithSchema(recorderReadServiceGetShoeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceGetCurrentShoeHandler := connect.NewUnaryHandler(
		RecorderReadServiceGetCurrentShoeProcedure,
		svc.GetCurrentShoe,
		connect.WithSchema(recorderReadServiceGetCurrentShoeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceListRoundsHandler := connect.NewUnaryHandler(
		RecorderReadServiceListRoundsProcedure,
		svc.ListRounds,
		connect.WithSchema(recorderReadServiceListRoundsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceGetRoundHandler := connect.NewUnaryHandler(
		RecorderReadServiceGetRoundProcedure,
		svc.GetRound,
		connect.WithSchema(recorderReadServiceGetRoundMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceGetCurrentRoundHandler := connect.NewUnaryHandler(
		RecorderReadServiceGetCurrentRoundProcedure,
		svc.GetCurrentRound,
		connect.WithSchema(recorderReadServiceGetCurrentRoundMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceGetPlayBackRoundHandler := connect.NewUnaryHandler(
		RecorderReadServiceGetPlayBackRoundProcedure,
		svc.GetPlayBackRound,
		connect.WithSchema(recorderReadServiceGetPlayBackRoundMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/recorder.RecorderReadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecorderReadServiceListShiftsProcedure:
			recorderReadServiceListShiftsHandler.ServeHTTP(w, r)
		case RecorderReadServiceGetShiftProcedure:
			recorderReadServiceGetShiftHandler.ServeHTTP(w, r)
		case RecorderReadServiceGetCurrentShiftProcedure:
			recorderReadServiceGetCurrentShiftHandler.ServeHTTP(w, r)
		case RecorderReadServiceListShoeProcedure:
			recorderReadServiceListShoeHandler.ServeHTTP(w, r)
		case RecorderReadServiceGetShoeProcedure:
			recorderReadServiceGetShoeHandler.ServeHTTP(w, r)
		case RecorderReadServiceGetCurrentShoeProcedure:
			recorderReadServiceGetCurrentShoeHandler.ServeHTTP(w, r)
		case RecorderReadServiceListRoundsProcedure:
			recorderReadServiceListRoundsHandler.ServeHTTP(w, r)
		case RecorderReadServiceGetRoundProcedure:
			recorderReadServiceGetRoundHandler.ServeHTTP(w, r)
		case RecorderReadServiceGetCurrentRoundProcedure:
			recorderReadServiceGetCurrentRoundHandler.ServeHTTP(w, r)
		case RecorderReadServiceGetPlayBackRoundProcedure:
			recorderReadServiceGetPlayBackRoundHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecorderReadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecorderReadServiceHandler struct{}

func (UnimplementedRecorderReadServiceHandler) ListShifts(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShiftsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.ListShifts is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) GetShift(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShiftRecord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.GetShift is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) GetCurrentShift(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShiftRecord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.GetCurrentShift is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) ListShoe(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListShoesRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.ListShoe is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) GetShoe(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.ShoeRecord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.GetShoe is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) GetCurrentShoe(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.ShoeRecord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.GetCurrentShoe is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) ListRounds(context.Context, *connect.Request[recorder.ListRecordsRequest]) (*connect.Response[recorder.ListRoundsRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.ListRounds is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) GetRound(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.RoundRecord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.GetRound is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) GetCurrentRound(context.Context, *connect.Request[recorder.GetCurrentRecordRequest]) (*connect.Response[recorder.RoundRecord], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.GetCurrentRound is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) GetPlayBackRound(context.Context, *connect.Request[recorder.GetRoundPlayBackRequest]) (*connect.Response[recorder.GetRoundPlayBackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.GetPlayBackRound is not implemented"))
}

// ProviderServiceClient is a client for the recorder.ProviderService service.
type ProviderServiceClient interface {
	// 取得即時遊戲列表
	ListGames(context.Context, *connect.Request[recorder.ListGamesRequest]) (*connect.Response[recorder.ListGamesResponse], error)
	// 取得單一即時遊戲資訊
	GetGames(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.GameProvide], error)
	// 驗證
	VerifyGame(context.Context, *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[emptypb.Empty], error)
	// 荷官資料
	ListDealers(context.Context, *connect.Request[recorder.ListDealersRequest]) (*connect.Response[recorder.ListDealersResponse], error)
	// 荷官資料
	GetDealer(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.Dealer], error)
}

// NewProviderServiceClient constructs a client for the recorder.ProviderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &providerServiceClient{
		listGames: connect.NewClient[recorder.ListGamesRequest, recorder.ListGamesResponse](
			httpClient,
			baseURL+ProviderServiceListGamesProcedure,
			connect.WithSchema(providerServiceListGamesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getGames: connect.NewClient[recorder.GetRequest, recorder.GameProvide](
			httpClient,
			baseURL+ProviderServiceGetGamesProcedure,
			connect.WithSchema(providerServiceGetGamesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		verifyGame: connect.NewClient[recorder.VerifyGameRequest, emptypb.Empty](
			httpClient,
			baseURL+ProviderServiceVerifyGameProcedure,
			connect.WithSchema(providerServiceVerifyGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDealers: connect.NewClient[recorder.ListDealersRequest, recorder.ListDealersResponse](
			httpClient,
			baseURL+ProviderServiceListDealersProcedure,
			connect.WithSchema(providerServiceListDealersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDealer: connect.NewClient[recorder.GetRequest, recorder.Dealer](
			httpClient,
			baseURL+ProviderServiceGetDealerProcedure,
			connect.WithSchema(providerServiceGetDealerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// providerServiceClient implements ProviderServiceClient.
type providerServiceClient struct {
	listGames   *connect.Client[recorder.ListGamesRequest, recorder.ListGamesResponse]
	getGames    *connect.Client[recorder.GetRequest, recorder.GameProvide]
	verifyGame  *connect.Client[recorder.VerifyGameRequest, emptypb.Empty]
	listDealers *connect.Client[recorder.ListDealersRequest, recorder.ListDealersResponse]
	getDealer   *connect.Client[recorder.GetRequest, recorder.Dealer]
}

// ListGames calls recorder.ProviderService.ListGames.
func (c *providerServiceClient) ListGames(ctx context.Context, req *connect.Request[recorder.ListGamesRequest]) (*connect.Response[recorder.ListGamesResponse], error) {
	return c.listGames.CallUnary(ctx, req)
}

// GetGames calls recorder.ProviderService.GetGames.
func (c *providerServiceClient) GetGames(ctx context.Context, req *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.GameProvide], error) {
	return c.getGames.CallUnary(ctx, req)
}

// VerifyGame calls recorder.ProviderService.VerifyGame.
func (c *providerServiceClient) VerifyGame(ctx context.Context, req *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.verifyGame.CallUnary(ctx, req)
}

// ListDealers calls recorder.ProviderService.ListDealers.
func (c *providerServiceClient) ListDealers(ctx context.Context, req *connect.Request[recorder.ListDealersRequest]) (*connect.Response[recorder.ListDealersResponse], error) {
	return c.listDealers.CallUnary(ctx, req)
}

// GetDealer calls recorder.ProviderService.GetDealer.
func (c *providerServiceClient) GetDealer(ctx context.Context, req *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.Dealer], error) {
	return c.getDealer.CallUnary(ctx, req)
}

// ProviderServiceHandler is an implementation of the recorder.ProviderService service.
type ProviderServiceHandler interface {
	// 取得即時遊戲列表
	ListGames(context.Context, *connect.Request[recorder.ListGamesRequest]) (*connect.Response[recorder.ListGamesResponse], error)
	// 取得單一即時遊戲資訊
	GetGames(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.GameProvide], error)
	// 驗證
	VerifyGame(context.Context, *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[emptypb.Empty], error)
	// 荷官資料
	ListDealers(context.Context, *connect.Request[recorder.ListDealersRequest]) (*connect.Response[recorder.ListDealersResponse], error)
	// 荷官資料
	GetDealer(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.Dealer], error)
}

// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	providerServiceListGamesHandler := connect.NewUnaryHandler(
		ProviderServiceListGamesProcedure,
		svc.ListGames,
		connect.WithSchema(providerServiceListGamesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceGetGamesHandler := connect.NewUnaryHandler(
		ProviderServiceGetGamesProcedure,
		svc.GetGames,
		connect.WithSchema(providerServiceGetGamesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceVerifyGameHandler := connect.NewUnaryHandler(
		ProviderServiceVerifyGameProcedure,
		svc.VerifyGame,
		connect.WithSchema(providerServiceVerifyGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceListDealersHandler := connect.NewUnaryHandler(
		ProviderServiceListDealersProcedure,
		svc.ListDealers,
		connect.WithSchema(providerServiceListDealersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceGetDealerHandler := connect.NewUnaryHandler(
		ProviderServiceGetDealerProcedure,
		svc.GetDealer,
		connect.WithSchema(providerServiceGetDealerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/recorder.ProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderServiceListGamesProcedure:
			providerServiceListGamesHandler.ServeHTTP(w, r)
		case ProviderServiceGetGamesProcedure:
			providerServiceGetGamesHandler.ServeHTTP(w, r)
		case ProviderServiceVerifyGameProcedure:
			providerServiceVerifyGameHandler.ServeHTTP(w, r)
		case ProviderServiceListDealersProcedure:
			providerServiceListDealersHandler.ServeHTTP(w, r)
		case ProviderServiceGetDealerProcedure:
			providerServiceGetDealerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderServiceHandler struct{}

func (UnimplementedProviderServiceHandler) ListGames(context.Context, *connect.Request[recorder.ListGamesRequest]) (*connect.Response[recorder.ListGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.ListGames is not implemented"))
}

func (UnimplementedProviderServiceHandler) GetGames(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.GameProvide], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.GetGames is not implemented"))
}

func (UnimplementedProviderServiceHandler) VerifyGame(context.Context, *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.VerifyGame is not implemented"))
}

func (UnimplementedProviderServiceHandler) ListDealers(context.Context, *connect.Request[recorder.ListDealersRequest]) (*connect.Response[recorder.ListDealersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.ListDealers is not implemented"))
}

func (UnimplementedProviderServiceHandler) GetDealer(context.Context, *connect.Request[recorder.GetRequest]) (*connect.Response[recorder.Dealer], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.GetDealer is not implemented"))
}
