// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: recorder/provider.proto

package recorderconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	recorder "github.com/wecasino/wecasino-proto/pbgo/recorder"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RecorderReadServiceName is the fully-qualified name of the RecorderReadService service.
	RecorderReadServiceName = "recorder.RecorderReadService"
	// ProviderServiceName is the fully-qualified name of the ProviderService service.
	ProviderServiceName = "recorder.ProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RecorderReadServiceFetchShiftRecordProcedure is the fully-qualified name of the
	// RecorderReadService's FetchShiftRecord RPC.
	RecorderReadServiceFetchShiftRecordProcedure = "/recorder.RecorderReadService/FetchShiftRecord"
	// RecorderReadServiceFetchLastOneShiftRecordProcedure is the fully-qualified name of the
	// RecorderReadService's FetchLastOneShiftRecord RPC.
	RecorderReadServiceFetchLastOneShiftRecordProcedure = "/recorder.RecorderReadService/FetchLastOneShiftRecord"
	// RecorderReadServiceFetchShoeRecordProcedure is the fully-qualified name of the
	// RecorderReadService's FetchShoeRecord RPC.
	RecorderReadServiceFetchShoeRecordProcedure = "/recorder.RecorderReadService/FetchShoeRecord"
	// RecorderReadServiceFetchLastOneShoeRecordProcedure is the fully-qualified name of the
	// RecorderReadService's FetchLastOneShoeRecord RPC.
	RecorderReadServiceFetchLastOneShoeRecordProcedure = "/recorder.RecorderReadService/FetchLastOneShoeRecord"
	// RecorderReadServiceFetchRoundRecordProcedure is the fully-qualified name of the
	// RecorderReadService's FetchRoundRecord RPC.
	RecorderReadServiceFetchRoundRecordProcedure = "/recorder.RecorderReadService/FetchRoundRecord"
	// RecorderReadServiceFetchLastOneRoundRecordProcedure is the fully-qualified name of the
	// RecorderReadService's FetchLastOneRoundRecord RPC.
	RecorderReadServiceFetchLastOneRoundRecordProcedure = "/recorder.RecorderReadService/FetchLastOneRoundRecord"
	// ProviderServiceFetchGameProvideListProcedure is the fully-qualified name of the ProviderService's
	// FetchGameProvideList RPC.
	ProviderServiceFetchGameProvideListProcedure = "/recorder.ProviderService/FetchGameProvideList"
	// ProviderServiceFetchGameProvideProcedure is the fully-qualified name of the ProviderService's
	// FetchGameProvide RPC.
	ProviderServiceFetchGameProvideProcedure = "/recorder.ProviderService/FetchGameProvide"
	// ProviderServiceFetchCurrentGameProcedure is the fully-qualified name of the ProviderService's
	// FetchCurrentGame RPC.
	ProviderServiceFetchCurrentGameProcedure = "/recorder.ProviderService/FetchCurrentGame"
	// ProviderServiceVerifyGameProcedure is the fully-qualified name of the ProviderService's
	// VerifyGame RPC.
	ProviderServiceVerifyGameProcedure = "/recorder.ProviderService/VerifyGame"
	// ProviderServiceGetDealersProcedure is the fully-qualified name of the ProviderService's
	// GetDealers RPC.
	ProviderServiceGetDealersProcedure = "/recorder.ProviderService/GetDealers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	recorderReadServiceServiceDescriptor                       = recorder.File_recorder_provider_proto.Services().ByName("RecorderReadService")
	recorderReadServiceFetchShiftRecordMethodDescriptor        = recorderReadServiceServiceDescriptor.Methods().ByName("FetchShiftRecord")
	recorderReadServiceFetchLastOneShiftRecordMethodDescriptor = recorderReadServiceServiceDescriptor.Methods().ByName("FetchLastOneShiftRecord")
	recorderReadServiceFetchShoeRecordMethodDescriptor         = recorderReadServiceServiceDescriptor.Methods().ByName("FetchShoeRecord")
	recorderReadServiceFetchLastOneShoeRecordMethodDescriptor  = recorderReadServiceServiceDescriptor.Methods().ByName("FetchLastOneShoeRecord")
	recorderReadServiceFetchRoundRecordMethodDescriptor        = recorderReadServiceServiceDescriptor.Methods().ByName("FetchRoundRecord")
	recorderReadServiceFetchLastOneRoundRecordMethodDescriptor = recorderReadServiceServiceDescriptor.Methods().ByName("FetchLastOneRoundRecord")
	providerServiceServiceDescriptor                           = recorder.File_recorder_provider_proto.Services().ByName("ProviderService")
	providerServiceFetchGameProvideListMethodDescriptor        = providerServiceServiceDescriptor.Methods().ByName("FetchGameProvideList")
	providerServiceFetchGameProvideMethodDescriptor            = providerServiceServiceDescriptor.Methods().ByName("FetchGameProvide")
	providerServiceFetchCurrentGameMethodDescriptor            = providerServiceServiceDescriptor.Methods().ByName("FetchCurrentGame")
	providerServiceVerifyGameMethodDescriptor                  = providerServiceServiceDescriptor.Methods().ByName("VerifyGame")
	providerServiceGetDealersMethodDescriptor                  = providerServiceServiceDescriptor.Methods().ByName("GetDealers")
)

// RecorderReadServiceClient is a client for the recorder.RecorderReadService service.
type RecorderReadServiceClient interface {
	// 讀取班次紀錄list
	FetchShiftRecord(context.Context, *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error)
	// 讀取最新班次紀錄
	FetchLastOneShiftRecord(context.Context, *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error)
	// 讀牌靴紀錄list
	FetchShoeRecord(context.Context, *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error)
	// 讀最新牌靴紀錄
	FetchLastOneShoeRecord(context.Context, *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error)
	// 讀遊戲局號紀錄list
	FetchRoundRecord(context.Context, *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error)
	// 讀最新遊戲局號紀錄
	FetchLastOneRoundRecord(context.Context, *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error)
}

// NewRecorderReadServiceClient constructs a client for the recorder.RecorderReadService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecorderReadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecorderReadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recorderReadServiceClient{
		fetchShiftRecord: connect.NewClient[recorder.FetchShiftRecordRequest, recorder.FetchShiftRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceFetchShiftRecordProcedure,
			connect.WithSchema(recorderReadServiceFetchShiftRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchLastOneShiftRecord: connect.NewClient[recorder.FetchShiftRecordRequest, recorder.FetchShiftRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceFetchLastOneShiftRecordProcedure,
			connect.WithSchema(recorderReadServiceFetchLastOneShiftRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchShoeRecord: connect.NewClient[recorder.FetchShoeRecordRequest, recorder.FetchShoeRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceFetchShoeRecordProcedure,
			connect.WithSchema(recorderReadServiceFetchShoeRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchLastOneShoeRecord: connect.NewClient[recorder.FetchShoeRecordRequest, recorder.FetchShoeRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceFetchLastOneShoeRecordProcedure,
			connect.WithSchema(recorderReadServiceFetchLastOneShoeRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchRoundRecord: connect.NewClient[recorder.FetchRoundRecordRequest, recorder.FetchRoundRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceFetchRoundRecordProcedure,
			connect.WithSchema(recorderReadServiceFetchRoundRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchLastOneRoundRecord: connect.NewClient[recorder.FetchRoundRecordRequest, recorder.FetchRoundRecordResponse](
			httpClient,
			baseURL+RecorderReadServiceFetchLastOneRoundRecordProcedure,
			connect.WithSchema(recorderReadServiceFetchLastOneRoundRecordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// recorderReadServiceClient implements RecorderReadServiceClient.
type recorderReadServiceClient struct {
	fetchShiftRecord        *connect.Client[recorder.FetchShiftRecordRequest, recorder.FetchShiftRecordResponse]
	fetchLastOneShiftRecord *connect.Client[recorder.FetchShiftRecordRequest, recorder.FetchShiftRecordResponse]
	fetchShoeRecord         *connect.Client[recorder.FetchShoeRecordRequest, recorder.FetchShoeRecordResponse]
	fetchLastOneShoeRecord  *connect.Client[recorder.FetchShoeRecordRequest, recorder.FetchShoeRecordResponse]
	fetchRoundRecord        *connect.Client[recorder.FetchRoundRecordRequest, recorder.FetchRoundRecordResponse]
	fetchLastOneRoundRecord *connect.Client[recorder.FetchRoundRecordRequest, recorder.FetchRoundRecordResponse]
}

// FetchShiftRecord calls recorder.RecorderReadService.FetchShiftRecord.
func (c *recorderReadServiceClient) FetchShiftRecord(ctx context.Context, req *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error) {
	return c.fetchShiftRecord.CallUnary(ctx, req)
}

// FetchLastOneShiftRecord calls recorder.RecorderReadService.FetchLastOneShiftRecord.
func (c *recorderReadServiceClient) FetchLastOneShiftRecord(ctx context.Context, req *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error) {
	return c.fetchLastOneShiftRecord.CallUnary(ctx, req)
}

// FetchShoeRecord calls recorder.RecorderReadService.FetchShoeRecord.
func (c *recorderReadServiceClient) FetchShoeRecord(ctx context.Context, req *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error) {
	return c.fetchShoeRecord.CallUnary(ctx, req)
}

// FetchLastOneShoeRecord calls recorder.RecorderReadService.FetchLastOneShoeRecord.
func (c *recorderReadServiceClient) FetchLastOneShoeRecord(ctx context.Context, req *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error) {
	return c.fetchLastOneShoeRecord.CallUnary(ctx, req)
}

// FetchRoundRecord calls recorder.RecorderReadService.FetchRoundRecord.
func (c *recorderReadServiceClient) FetchRoundRecord(ctx context.Context, req *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error) {
	return c.fetchRoundRecord.CallUnary(ctx, req)
}

// FetchLastOneRoundRecord calls recorder.RecorderReadService.FetchLastOneRoundRecord.
func (c *recorderReadServiceClient) FetchLastOneRoundRecord(ctx context.Context, req *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error) {
	return c.fetchLastOneRoundRecord.CallUnary(ctx, req)
}

// RecorderReadServiceHandler is an implementation of the recorder.RecorderReadService service.
type RecorderReadServiceHandler interface {
	// 讀取班次紀錄list
	FetchShiftRecord(context.Context, *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error)
	// 讀取最新班次紀錄
	FetchLastOneShiftRecord(context.Context, *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error)
	// 讀牌靴紀錄list
	FetchShoeRecord(context.Context, *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error)
	// 讀最新牌靴紀錄
	FetchLastOneShoeRecord(context.Context, *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error)
	// 讀遊戲局號紀錄list
	FetchRoundRecord(context.Context, *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error)
	// 讀最新遊戲局號紀錄
	FetchLastOneRoundRecord(context.Context, *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error)
}

// NewRecorderReadServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecorderReadServiceHandler(svc RecorderReadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recorderReadServiceFetchShiftRecordHandler := connect.NewUnaryHandler(
		RecorderReadServiceFetchShiftRecordProcedure,
		svc.FetchShiftRecord,
		connect.WithSchema(recorderReadServiceFetchShiftRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceFetchLastOneShiftRecordHandler := connect.NewUnaryHandler(
		RecorderReadServiceFetchLastOneShiftRecordProcedure,
		svc.FetchLastOneShiftRecord,
		connect.WithSchema(recorderReadServiceFetchLastOneShiftRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceFetchShoeRecordHandler := connect.NewUnaryHandler(
		RecorderReadServiceFetchShoeRecordProcedure,
		svc.FetchShoeRecord,
		connect.WithSchema(recorderReadServiceFetchShoeRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceFetchLastOneShoeRecordHandler := connect.NewUnaryHandler(
		RecorderReadServiceFetchLastOneShoeRecordProcedure,
		svc.FetchLastOneShoeRecord,
		connect.WithSchema(recorderReadServiceFetchLastOneShoeRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceFetchRoundRecordHandler := connect.NewUnaryHandler(
		RecorderReadServiceFetchRoundRecordProcedure,
		svc.FetchRoundRecord,
		connect.WithSchema(recorderReadServiceFetchRoundRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recorderReadServiceFetchLastOneRoundRecordHandler := connect.NewUnaryHandler(
		RecorderReadServiceFetchLastOneRoundRecordProcedure,
		svc.FetchLastOneRoundRecord,
		connect.WithSchema(recorderReadServiceFetchLastOneRoundRecordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/recorder.RecorderReadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecorderReadServiceFetchShiftRecordProcedure:
			recorderReadServiceFetchShiftRecordHandler.ServeHTTP(w, r)
		case RecorderReadServiceFetchLastOneShiftRecordProcedure:
			recorderReadServiceFetchLastOneShiftRecordHandler.ServeHTTP(w, r)
		case RecorderReadServiceFetchShoeRecordProcedure:
			recorderReadServiceFetchShoeRecordHandler.ServeHTTP(w, r)
		case RecorderReadServiceFetchLastOneShoeRecordProcedure:
			recorderReadServiceFetchLastOneShoeRecordHandler.ServeHTTP(w, r)
		case RecorderReadServiceFetchRoundRecordProcedure:
			recorderReadServiceFetchRoundRecordHandler.ServeHTTP(w, r)
		case RecorderReadServiceFetchLastOneRoundRecordProcedure:
			recorderReadServiceFetchLastOneRoundRecordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecorderReadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecorderReadServiceHandler struct{}

func (UnimplementedRecorderReadServiceHandler) FetchShiftRecord(context.Context, *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.FetchShiftRecord is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) FetchLastOneShiftRecord(context.Context, *connect.Request[recorder.FetchShiftRecordRequest]) (*connect.Response[recorder.FetchShiftRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.FetchLastOneShiftRecord is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) FetchShoeRecord(context.Context, *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.FetchShoeRecord is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) FetchLastOneShoeRecord(context.Context, *connect.Request[recorder.FetchShoeRecordRequest]) (*connect.Response[recorder.FetchShoeRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.FetchLastOneShoeRecord is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) FetchRoundRecord(context.Context, *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.FetchRoundRecord is not implemented"))
}

func (UnimplementedRecorderReadServiceHandler) FetchLastOneRoundRecord(context.Context, *connect.Request[recorder.FetchRoundRecordRequest]) (*connect.Response[recorder.FetchRoundRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.RecorderReadService.FetchLastOneRoundRecord is not implemented"))
}

// ProviderServiceClient is a client for the recorder.ProviderService service.
type ProviderServiceClient interface {
	// 取得即時遊戲列表
	FetchGameProvideList(context.Context, *connect.Request[recorder.FetchGameProvideListRequest]) (*connect.Response[recorder.FetchGameProvideListResponse], error)
	// 取得單一即時遊戲資訊
	FetchGameProvide(context.Context, *connect.Request[recorder.FetchGameProvideRequest]) (*connect.Response[recorder.FetchGameProvideResponse], error)
	// 讀即時遊戲桌資訊
	FetchCurrentGame(context.Context, *connect.Request[recorder.FetchCurrentGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error)
	// 驗證
	VerifyGame(context.Context, *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error)
	// 荷官資料
	GetDealers(context.Context, *connect.Request[recorder.GetDealerRequest]) (*connect.Response[recorder.GetDealerResponse], error)
}

// NewProviderServiceClient constructs a client for the recorder.ProviderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &providerServiceClient{
		fetchGameProvideList: connect.NewClient[recorder.FetchGameProvideListRequest, recorder.FetchGameProvideListResponse](
			httpClient,
			baseURL+ProviderServiceFetchGameProvideListProcedure,
			connect.WithSchema(providerServiceFetchGameProvideListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchGameProvide: connect.NewClient[recorder.FetchGameProvideRequest, recorder.FetchGameProvideResponse](
			httpClient,
			baseURL+ProviderServiceFetchGameProvideProcedure,
			connect.WithSchema(providerServiceFetchGameProvideMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fetchCurrentGame: connect.NewClient[recorder.FetchCurrentGameRequest, recorder.FetchCurrentGameResponse](
			httpClient,
			baseURL+ProviderServiceFetchCurrentGameProcedure,
			connect.WithSchema(providerServiceFetchCurrentGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		verifyGame: connect.NewClient[recorder.VerifyGameRequest, recorder.FetchCurrentGameResponse](
			httpClient,
			baseURL+ProviderServiceVerifyGameProcedure,
			connect.WithSchema(providerServiceVerifyGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDealers: connect.NewClient[recorder.GetDealerRequest, recorder.GetDealerResponse](
			httpClient,
			baseURL+ProviderServiceGetDealersProcedure,
			connect.WithSchema(providerServiceGetDealersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// providerServiceClient implements ProviderServiceClient.
type providerServiceClient struct {
	fetchGameProvideList *connect.Client[recorder.FetchGameProvideListRequest, recorder.FetchGameProvideListResponse]
	fetchGameProvide     *connect.Client[recorder.FetchGameProvideRequest, recorder.FetchGameProvideResponse]
	fetchCurrentGame     *connect.Client[recorder.FetchCurrentGameRequest, recorder.FetchCurrentGameResponse]
	verifyGame           *connect.Client[recorder.VerifyGameRequest, recorder.FetchCurrentGameResponse]
	getDealers           *connect.Client[recorder.GetDealerRequest, recorder.GetDealerResponse]
}

// FetchGameProvideList calls recorder.ProviderService.FetchGameProvideList.
func (c *providerServiceClient) FetchGameProvideList(ctx context.Context, req *connect.Request[recorder.FetchGameProvideListRequest]) (*connect.Response[recorder.FetchGameProvideListResponse], error) {
	return c.fetchGameProvideList.CallUnary(ctx, req)
}

// FetchGameProvide calls recorder.ProviderService.FetchGameProvide.
func (c *providerServiceClient) FetchGameProvide(ctx context.Context, req *connect.Request[recorder.FetchGameProvideRequest]) (*connect.Response[recorder.FetchGameProvideResponse], error) {
	return c.fetchGameProvide.CallUnary(ctx, req)
}

// FetchCurrentGame calls recorder.ProviderService.FetchCurrentGame.
func (c *providerServiceClient) FetchCurrentGame(ctx context.Context, req *connect.Request[recorder.FetchCurrentGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error) {
	return c.fetchCurrentGame.CallUnary(ctx, req)
}

// VerifyGame calls recorder.ProviderService.VerifyGame.
func (c *providerServiceClient) VerifyGame(ctx context.Context, req *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error) {
	return c.verifyGame.CallUnary(ctx, req)
}

// GetDealers calls recorder.ProviderService.GetDealers.
func (c *providerServiceClient) GetDealers(ctx context.Context, req *connect.Request[recorder.GetDealerRequest]) (*connect.Response[recorder.GetDealerResponse], error) {
	return c.getDealers.CallUnary(ctx, req)
}

// ProviderServiceHandler is an implementation of the recorder.ProviderService service.
type ProviderServiceHandler interface {
	// 取得即時遊戲列表
	FetchGameProvideList(context.Context, *connect.Request[recorder.FetchGameProvideListRequest]) (*connect.Response[recorder.FetchGameProvideListResponse], error)
	// 取得單一即時遊戲資訊
	FetchGameProvide(context.Context, *connect.Request[recorder.FetchGameProvideRequest]) (*connect.Response[recorder.FetchGameProvideResponse], error)
	// 讀即時遊戲桌資訊
	FetchCurrentGame(context.Context, *connect.Request[recorder.FetchCurrentGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error)
	// 驗證
	VerifyGame(context.Context, *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error)
	// 荷官資料
	GetDealers(context.Context, *connect.Request[recorder.GetDealerRequest]) (*connect.Response[recorder.GetDealerResponse], error)
}

// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	providerServiceFetchGameProvideListHandler := connect.NewUnaryHandler(
		ProviderServiceFetchGameProvideListProcedure,
		svc.FetchGameProvideList,
		connect.WithSchema(providerServiceFetchGameProvideListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceFetchGameProvideHandler := connect.NewUnaryHandler(
		ProviderServiceFetchGameProvideProcedure,
		svc.FetchGameProvide,
		connect.WithSchema(providerServiceFetchGameProvideMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceFetchCurrentGameHandler := connect.NewUnaryHandler(
		ProviderServiceFetchCurrentGameProcedure,
		svc.FetchCurrentGame,
		connect.WithSchema(providerServiceFetchCurrentGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceVerifyGameHandler := connect.NewUnaryHandler(
		ProviderServiceVerifyGameProcedure,
		svc.VerifyGame,
		connect.WithSchema(providerServiceVerifyGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceGetDealersHandler := connect.NewUnaryHandler(
		ProviderServiceGetDealersProcedure,
		svc.GetDealers,
		connect.WithSchema(providerServiceGetDealersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/recorder.ProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderServiceFetchGameProvideListProcedure:
			providerServiceFetchGameProvideListHandler.ServeHTTP(w, r)
		case ProviderServiceFetchGameProvideProcedure:
			providerServiceFetchGameProvideHandler.ServeHTTP(w, r)
		case ProviderServiceFetchCurrentGameProcedure:
			providerServiceFetchCurrentGameHandler.ServeHTTP(w, r)
		case ProviderServiceVerifyGameProcedure:
			providerServiceVerifyGameHandler.ServeHTTP(w, r)
		case ProviderServiceGetDealersProcedure:
			providerServiceGetDealersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderServiceHandler struct{}

func (UnimplementedProviderServiceHandler) FetchGameProvideList(context.Context, *connect.Request[recorder.FetchGameProvideListRequest]) (*connect.Response[recorder.FetchGameProvideListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.FetchGameProvideList is not implemented"))
}

func (UnimplementedProviderServiceHandler) FetchGameProvide(context.Context, *connect.Request[recorder.FetchGameProvideRequest]) (*connect.Response[recorder.FetchGameProvideResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.FetchGameProvide is not implemented"))
}

func (UnimplementedProviderServiceHandler) FetchCurrentGame(context.Context, *connect.Request[recorder.FetchCurrentGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.FetchCurrentGame is not implemented"))
}

func (UnimplementedProviderServiceHandler) VerifyGame(context.Context, *connect.Request[recorder.VerifyGameRequest]) (*connect.Response[recorder.FetchCurrentGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.VerifyGame is not implemented"))
}

func (UnimplementedProviderServiceHandler) GetDealers(context.Context, *connect.Request[recorder.GetDealerRequest]) (*connect.Response[recorder.GetDealerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recorder.ProviderService.GetDealers is not implemented"))
}
