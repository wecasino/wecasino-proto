// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: recorder/record.proto

package recorder

import (
	games "github.com/wecasino/wecasino-proto/pbgo/games"
	_ "github.com/wecasino/wecasino-proto/pbgo/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StepActionType
// 動作類型
type StepActionType int32

const (
	// 未指定
	StepActionType_STEP_ACTION_TYPE_UNSPECIFIED StepActionType = 0
	// 派發資源
	StepActionType_ADD StepActionType = 1
	// 設定指定資源
	StepActionType_SET StepActionType = 2
	// 改寫全部資源;
	StepActionType_SETALL StepActionType = 3
	// 將資源從場上移除
	StepActionType_REMOVE StepActionType = 4
	// 讀取卡牌資料
	StepActionType_READ StepActionType = 5
	// 讀卡但不可見
	StepActionType_READ_UNVISIBLE StepActionType = 6
	// 移轉資源
	StepActionType_TRANSFER StepActionType = 7
	// 卡片正反面
	StepActionType_VISIBLE StepActionType = 8
	// 卡牌狀態改變
	StepActionType_STATUS StepActionType = 9
	// 此步驟不須修改資源
	StepActionType_NONE StepActionType = 10
	// 決定輸贏
	StepActionType_WIN StepActionType = 11
)

// Enum value maps for StepActionType.
var (
	StepActionType_name = map[int32]string{
		0:  "STEP_ACTION_TYPE_UNSPECIFIED",
		1:  "ADD",
		2:  "SET",
		3:  "SETALL",
		4:  "REMOVE",
		5:  "READ",
		6:  "READ_UNVISIBLE",
		7:  "TRANSFER",
		8:  "VISIBLE",
		9:  "STATUS",
		10: "NONE",
		11: "WIN",
	}
	StepActionType_value = map[string]int32{
		"STEP_ACTION_TYPE_UNSPECIFIED": 0,
		"ADD":                          1,
		"SET":                          2,
		"SETALL":                       3,
		"REMOVE":                       4,
		"READ":                         5,
		"READ_UNVISIBLE":               6,
		"TRANSFER":                     7,
		"VISIBLE":                      8,
		"STATUS":                       9,
		"NONE":                         10,
		"WIN":                          11,
	}
)

func (x StepActionType) Enum() *StepActionType {
	p := new(StepActionType)
	*p = x
	return p
}

func (x StepActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StepActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_recorder_record_proto_enumTypes[0].Descriptor()
}

func (StepActionType) Type() protoreflect.EnumType {
	return &file_recorder_record_proto_enumTypes[0]
}

func (x StepActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StepActionType.Descriptor instead.
func (StepActionType) EnumDescriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{0}
}

// BetStep
// 下注步驟
type BetStep int32

const (
	// 未指定，此步驟與下注無關
	BetStep_BET_STEP_UNSPECIFIED BetStep = 0
	// 開始下注
	BetStep_ROUND_BET BetStep = 1
	// 停止下注
	BetStep_NO_MORE_BET BetStep = 3
	// 牌異動
	BetStep_CARD BetStep = 4
)

// Enum value maps for BetStep.
var (
	BetStep_name = map[int32]string{
		0: "BET_STEP_UNSPECIFIED",
		1: "ROUND_BET",
		3: "NO_MORE_BET",
		4: "CARD",
	}
	BetStep_value = map[string]int32{
		"BET_STEP_UNSPECIFIED": 0,
		"ROUND_BET":            1,
		"NO_MORE_BET":          3,
		"CARD":                 4,
	}
)

func (x BetStep) Enum() *BetStep {
	p := new(BetStep)
	*p = x
	return p
}

func (x BetStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BetStep) Descriptor() protoreflect.EnumDescriptor {
	return file_recorder_record_proto_enumTypes[1].Descriptor()
}

func (BetStep) Type() protoreflect.EnumType {
	return &file_recorder_record_proto_enumTypes[1]
}

func (x BetStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BetStep.Descriptor instead.
func (BetStep) EnumDescriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{1}
}

// Card
// 卡牌，代表在此局中使用的各類物品
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 卡牌ID：牌唯一碼
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"id" yaml:"id"`
	// 卡牌代碼
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code" bson:"code" yaml:"code"`
	// 順序
	Index int64 `protobuf:"varint,3,opt,name=index,proto3" json:"index" bson:"index" yaml:"index"`
	// 可見
	Visible bool `protobuf:"varint,4,opt,name=visible,proto3" json:"visible" bson:"visible" yaml:"visible"`
	// 橫放、直放...
	Status *int64 `protobuf:"varint,5,opt,name=status,proto3,oneof" json:"status" yaml:"status" bson:"status,omitempty"`
	// 明文
	PlainText *string `protobuf:"bytes,8,opt,name=plain_text,json=plainText,proto3,oneof" json:"plainText" bson:"plainText,omitempty" yaml:"plainText"`
	// 簽章
	Signature *string `protobuf:"bytes,9,opt,name=signature,proto3,oneof" json:"signature" bson:"signature,omitempty" yaml:"signature"`
	// 簽章方法
	SignAlgorithm *string `protobuf:"bytes,10,opt,name=sign_algorithm,json=signAlgorithm,proto3,oneof" json:"signAlgorithm" bson:"signAlgorithm,omitempty" yaml:"signAlgorithm"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Card) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Card) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Card) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Card) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Card) GetPlainText() string {
	if x != nil && x.PlainText != nil {
		return *x.PlainText
	}
	return ""
}

func (x *Card) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *Card) GetSignAlgorithm() string {
	if x != nil && x.SignAlgorithm != nil {
		return *x.SignAlgorithm
	}
	return ""
}

// CardList
// 卡牌列表
type CardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType string `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"cardType" bson:"cardType" yaml:"cardType"`
	// 列表
	List []*Card `protobuf:"bytes,2,rep,name=list,proto3" json:"list" yaml:"list" bson:"list"`
	// 牌型
	Pattern int32 `protobuf:"varint,3,opt,name=pattern,proto3" json:"pattern" bson:"pattern" yaml:"pattern"`
}

func (x *CardList) Reset() {
	*x = CardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardList) ProtoMessage() {}

func (x *CardList) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardList.ProtoReflect.Descriptor instead.
func (*CardList) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{1}
}

func (x *CardList) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *CardList) GetList() []*Card {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CardList) GetPattern() int32 {
	if x != nil {
		return x.Pattern
	}
	return 0
}

// StepAction
// 執行動作：對某些資源進行增、刪、移轉
type StepAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 行為說明代碼
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code" bson:"code" yaml:"code"`
	// 動作類型
	Type StepActionType `protobuf:"varint,3,opt,name=type,proto3,enum=recorder.StepActionType" json:"type" bson:"type" yaml:"type"`
	// 資源擁有座位。
	SourceSeat *int32 `protobuf:"varint,4,opt,name=source_seat,json=sourceSeat,proto3,oneof" json:"sourceSeat" bson:"sourceSeat,omitempty" yaml:"sourceSeat"`
	// 資源轉移目標座位。
	TargetSeat *int32 `protobuf:"varint,5,opt,name=target_seat,json=targetSeat,proto3,oneof" json:"targetSeat" yaml:"targetSeat" bson:"targetSeat,omitempty"`
	// 目標卡牌資源
	// key: ResourceTypeCode, value: 卡牌陣列
	Cards map[int32]*CardList `protobuf:"bytes,6,rep,name=cards,proto3" json:"cards" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"cards,omitempty" yaml:"cards"`
	// （可選）附加資料
	Data *anypb.Any `protobuf:"bytes,8,opt,name=data,proto3" json:"data" yaml:"data" bson:"data,omitempty"`
}

func (x *StepAction) Reset() {
	*x = StepAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepAction) ProtoMessage() {}

func (x *StepAction) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepAction.ProtoReflect.Descriptor instead.
func (*StepAction) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{2}
}

func (x *StepAction) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StepAction) GetType() StepActionType {
	if x != nil {
		return x.Type
	}
	return StepActionType_STEP_ACTION_TYPE_UNSPECIFIED
}

func (x *StepAction) GetSourceSeat() int32 {
	if x != nil && x.SourceSeat != nil {
		return *x.SourceSeat
	}
	return 0
}

func (x *StepAction) GetTargetSeat() int32 {
	if x != nil && x.TargetSeat != nil {
		return *x.TargetSeat
	}
	return 0
}

func (x *StepAction) GetCards() map[int32]*CardList {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *StepAction) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// Step
// 遊戲步驟
type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 步驟代碼：StepCode
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code" bson:"code" yaml:"code"`
	// 玩家、執行者：SeatCode
	Seat *int32 `protobuf:"varint,3,opt,name=seat,proto3,oneof" json:"seat" bson:"seat,omitempty" yaml:"seat"`
	// 時間戳
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp" bson:"timestamp" yaml:"timestamp"`
	// 執行動作
	Actions []*StepAction `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions" bson:"action,omitempty" yaml:"actions"`
	// 執行錯誤
	Error *string `protobuf:"bytes,8,opt,name=error,proto3,oneof" json:"error" bson:"error,omitempty" yaml:"error"`
	// 取消
	Cancel *bool `protobuf:"varint,9,opt,name=cancel,proto3,oneof" json:"cancel" bson:"cancel,omitempty" yaml:"cancel"`
	// 分配毫秒數
	Duration *int64 `protobuf:"varint,10,opt,name=duration,proto3,oneof" json:"duration" yaml:"duration" bson:"duration,omitempty"`
	// 下注動作
	BetStep BetStep `protobuf:"varint,11,opt,name=bet_step,json=betStep,proto3,enum=recorder.BetStep" json:"betStep" yaml:"betStep" bson:"betStep"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{3}
}

func (x *Step) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Step) GetSeat() int32 {
	if x != nil && x.Seat != nil {
		return *x.Seat
	}
	return 0
}

func (x *Step) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Step) GetActions() []*StepAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Step) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *Step) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return false
}

func (x *Step) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Step) GetBetStep() BetStep {
	if x != nil {
		return x.BetStep
	}
	return BetStep_BET_STEP_UNSPECIFIED
}

// Seat
// 座位
type Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 座位功能代碼：SeatCode
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code" bson:"code" yaml:"code"`
	// 各類手牌
	// key: ResourceTypeCode, value: 卡牌陣列
	Cards map[int32]*CardList `protobuf:"bytes,3,rep,name=cards,proto3" json:"cards" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"cards,omitempty" yaml:"cards"`
}

func (x *Seat) Reset() {
	*x = Seat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seat) ProtoMessage() {}

func (x *Seat) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seat.ProtoReflect.Descriptor instead.
func (*Seat) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{4}
}

func (x *Seat) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Seat) GetCards() map[int32]*CardList {
	if x != nil {
		return x.Cards
	}
	return nil
}

// RoundRecord
// 局紀錄
type RoundRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id,omitempty" yaml:"id"`
	// 遊戲供應
	Supplier string `protobuf:"bytes,2,opt,name=supplier,proto3" json:"supplier" bson:"supplier" yaml:"supplier"`
	// 遊戲類型
	GameType string `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"gameType" bson:"gameType" yaml:"gameType"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,4,opt,name=game_subtype,json=gameSubtype,proto3" json:"gameSubtype" bson:"gameSubtype" yaml:"gameSubtype"`
	// 遊戲版本
	GameVersion string `protobuf:"bytes,5,opt,name=game_version,json=gameVersion,proto3" json:"gameVersion" bson:"gameVersion" yaml:"gameVersion"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 桌代碼
	TableCode string `protobuf:"bytes,7,opt,name=table_code,json=tableCode,proto3" json:"tableCode" yaml:"tableCode" bson:"tableCode"`
	// 班代碼
	ShiftCode string `protobuf:"bytes,8,opt,name=shift_code,json=shiftCode,proto3" json:"shiftCode" bson:"shiftCode" yaml:"shiftCode"`
	// 此排班局數
	ShiftRound int64 `protobuf:"varint,9,opt,name=shift_round,json=shiftRound,proto3" json:"shiftRound" yaml:"shiftRound" bson:"shiftRound"`
	// 使用靴代碼
	ShoeCode string `protobuf:"bytes,10,opt,name=shoe_code,json=shoeCode,proto3" json:"shoeCode" bson:"shoeCode" yaml:"shoeCode"`
	// 使用此洗牌第幾局，從1開始計算
	ShoeRound int64 `protobuf:"varint,11,opt,name=shoe_round,json=shoeRound,proto3" json:"shoeRound" bson:"shoeRound" yaml:"shoeRound"`
	// 局代碼
	RoundCode string `protobuf:"bytes,12,opt,name=round_code,json=roundCode,proto3" json:"roundCode" bson:"roundCode" yaml:"roundCode"`
	// 標籤
	Tags map[string]string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"tags" yaml:"tags"`
	// 開始時間
	TsStart *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=ts_start,json=tsStart,proto3" json:"tsStart" bson:"tsStart" yaml:"tsStart"`
	// 下注狀態
	BetStep BetStep `protobuf:"varint,17,opt,name=bet_step,json=betStep,proto3,enum=recorder.BetStep" json:"betStep" bson:"betStep" yaml:"betStep"`
	// 座位組
	// key: SeatCode, value: Seat
	Seats map[int32]*Seat `protobuf:"bytes,24,rep,name=seats,proto3" json:"seats" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"seats,omitempty" yaml:"seats"`
	// 玩家入座
	// key: SeatCode, value: 玩家code。
	Players map[int32]string `protobuf:"bytes,25,rep,name=players,proto3" json:"players" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"players,omitempty" yaml:"players"`
	// 玩家姓名
	// key: 玩家code, value: 玩家名稱。
	PlayersName map[string]string `protobuf:"bytes,30,rep,name=players_name,json=playersName,proto3" json:"playersName" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"playersName,omitempty" yaml:"playersName"`
	// 歷程
	Process []*Step `protobuf:"bytes,26,rep,name=process,proto3" json:"process" bson:"process,omitempty" yaml:"process"`
	// 結束
	IsEnd bool `protobuf:"varint,18,opt,name=is_end,json=isEnd,proto3" json:"isEnd" bson:"isEnd" yaml:"isEnd"`
	// 結束時間
	TsEnd *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=ts_end,json=tsEnd,proto3" json:"tsEnd" bson:"tsEnd,omitempty" yaml:"tsEnd"`
	// 取消
	Cancel *bool `protobuf:"varint,20,opt,name=cancel,proto3,oneof" json:"cancel" bson:"cancel,omitempty" yaml:"cancel"`
	// 取消代碼：CancelReasonCode
	CancelCode *string `protobuf:"bytes,21,opt,name=cancel_code,json=cancelCode,proto3,oneof" json:"cancelCode" bson:"cancelCode,omitempty" yaml:"cancelCode"`
	// 取消備註
	CancelMessage *string `protobuf:"bytes,22,opt,name=cancel_message,json=cancelMessage,proto3,oneof" json:"cancelMessage" bson:"cancelMessage,omitempty" yaml:"cancelMessage"`
	// 贏方
	WinType map[int32]games.WinType `protobuf:"bytes,27,rep,name=win_type,json=winType,proto3" json:"winType" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=games.WinType" bson:"winType,omitempty" yaml:"winType"`
	// 附加媒體：key: 媒體資源代碼；value: 媒體內容。
	Medias map[string]string `protobuf:"bytes,28,rep,name=medias,proto3" json:"medias" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"medias" yaml:"medias"`
	// 財神倍率
	FortuneRates map[string]int64 `protobuf:"bytes,29,rep,name=fortune_rates,json=fortuneRates,proto3" json:"fortuneRates" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"fortuneRates" yaml:"fortuneRates"`
}

func (x *RoundRecord) Reset() {
	*x = RoundRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundRecord) ProtoMessage() {}

func (x *RoundRecord) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundRecord.ProtoReflect.Descriptor instead.
func (*RoundRecord) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{5}
}

func (x *RoundRecord) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RoundRecord) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

func (x *RoundRecord) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *RoundRecord) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *RoundRecord) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *RoundRecord) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RoundRecord) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *RoundRecord) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *RoundRecord) GetShiftRound() int64 {
	if x != nil {
		return x.ShiftRound
	}
	return 0
}

func (x *RoundRecord) GetShoeCode() string {
	if x != nil {
		return x.ShoeCode
	}
	return ""
}

func (x *RoundRecord) GetShoeRound() int64 {
	if x != nil {
		return x.ShoeRound
	}
	return 0
}

func (x *RoundRecord) GetRoundCode() string {
	if x != nil {
		return x.RoundCode
	}
	return ""
}

func (x *RoundRecord) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RoundRecord) GetTsStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TsStart
	}
	return nil
}

func (x *RoundRecord) GetBetStep() BetStep {
	if x != nil {
		return x.BetStep
	}
	return BetStep_BET_STEP_UNSPECIFIED
}

func (x *RoundRecord) GetSeats() map[int32]*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *RoundRecord) GetPlayers() map[int32]string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoundRecord) GetPlayersName() map[string]string {
	if x != nil {
		return x.PlayersName
	}
	return nil
}

func (x *RoundRecord) GetProcess() []*Step {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *RoundRecord) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

func (x *RoundRecord) GetTsEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEnd
	}
	return nil
}

func (x *RoundRecord) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return false
}

func (x *RoundRecord) GetCancelCode() string {
	if x != nil && x.CancelCode != nil {
		return *x.CancelCode
	}
	return ""
}

func (x *RoundRecord) GetCancelMessage() string {
	if x != nil && x.CancelMessage != nil {
		return *x.CancelMessage
	}
	return ""
}

func (x *RoundRecord) GetWinType() map[int32]games.WinType {
	if x != nil {
		return x.WinType
	}
	return nil
}

func (x *RoundRecord) GetMedias() map[string]string {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *RoundRecord) GetFortuneRates() map[string]int64 {
	if x != nil {
		return x.FortuneRates
	}
	return nil
}

// Deck
// 一副牌
type Deck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 卡牌
	Cards *CardList `protobuf:"bytes,1,opt,name=cards,proto3" json:"cards" bson:"cards" yaml:"cards"`
	// 起始位置（削牌後）
	StartIndex int64 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"startIndex" yaml:"startIndex" bson:"startIndex"`
	// 切牌位置
	CutIndex *int64 `protobuf:"varint,3,opt,name=cut_index,json=cutIndex,proto3,oneof" json:"cutIndex" bson:"cutIndex,omitempty" yaml:"cutIndex"`
	// 目前位置
	Index int64 `protobuf:"varint,4,opt,name=index,proto3" json:"index" bson:"index" yaml:"index"`
}

func (x *Deck) Reset() {
	*x = Deck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{6}
}

func (x *Deck) GetCards() *CardList {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Deck) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *Deck) GetCutIndex() int64 {
	if x != nil && x.CutIndex != nil {
		return *x.CutIndex
	}
	return 0
}

func (x *Deck) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

// ShoeRecord
// 靴紀錄
type ShoeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id" bson:"_id,omitempty"`
	// 遊戲供應
	Supplier string `protobuf:"bytes,2,opt,name=supplier,proto3" json:"supplier" bson:"supplier" yaml:"supplier"`
	// 遊戲類型
	GameType string `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"gameType" bson:"gameType" yaml:"gameType"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,4,opt,name=game_subtype,json=gameSubtype,proto3" json:"gameSubtype" yaml:"gameSubtype" bson:"gameSubtype"`
	// 遊戲版本
	GameVersion string `protobuf:"bytes,5,opt,name=game_version,json=gameVersion,proto3" json:"gameVersion" bson:"gameVersion" yaml:"gameVersion"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" bson:"gameCode" yaml:"gameCode"`
	// 桌代碼
	TableCode string `protobuf:"bytes,7,opt,name=table_code,json=tableCode,proto3" json:"tableCode" yaml:"tableCode" bson:"tableCode"`
	// 班代碼
	ShiftCode string `protobuf:"bytes,8,opt,name=shift_code,json=shiftCode,proto3" json:"shiftCode" bson:"shiftCode" yaml:"shiftCode"`
	// 使用洗牌代碼
	ShoeCode string `protobuf:"bytes,10,opt,name=shoe_code,json=shoeCode,proto3" json:"shoeCode" bson:"shoeCode" yaml:"shoeCode"`
	// 此牌靴開始使用時間
	TsStart *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=ts_start,json=tsStart,proto3" json:"tsStart" bson:"tsStart" yaml:"tsStart"`
	// cardList
	Decks map[int32]*Deck `protobuf:"bytes,24,rep,name=decks,proto3" json:"decks" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"decks,omitempty" yaml:"decks"`
	// 此牌靴已使用完畢，不可再使用
	IsEnd bool `protobuf:"varint,18,opt,name=is_end,json=isEnd,proto3" json:"isEnd" bson:"isEnd" yaml:"isEnd"`
	// 牌靴使用完畢時間
	TsEnd *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=ts_end,json=tsEnd,proto3" json:"tsEnd" bson:"tsEnd,omitempty" yaml:"tsEnd"`
}

func (x *ShoeRecord) Reset() {
	*x = ShoeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShoeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShoeRecord) ProtoMessage() {}

func (x *ShoeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShoeRecord.ProtoReflect.Descriptor instead.
func (*ShoeRecord) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{7}
}

func (x *ShoeRecord) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ShoeRecord) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

func (x *ShoeRecord) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *ShoeRecord) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *ShoeRecord) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *ShoeRecord) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *ShoeRecord) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *ShoeRecord) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *ShoeRecord) GetShoeCode() string {
	if x != nil {
		return x.ShoeCode
	}
	return ""
}

func (x *ShoeRecord) GetTsStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TsStart
	}
	return nil
}

func (x *ShoeRecord) GetDecks() map[int32]*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

func (x *ShoeRecord) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

func (x *ShoeRecord) GetTsEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEnd
	}
	return nil
}

// ShiftRecord
// 排班記錄
type ShiftRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紀錄ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id,omitempty" yaml:"id"`
	// 遊戲供應
	Supplier string `protobuf:"bytes,2,opt,name=supplier,proto3" json:"supplier" yaml:"supplier" bson:"supplier"`
	// 遊戲類型
	GameType string `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"gameType" bson:"gameType" yaml:"gameType"`
	// 遊戲子類型
	GameSubtype string `protobuf:"bytes,4,opt,name=game_subtype,json=gameSubtype,proto3" json:"gameSubtype" bson:"gameSubtype" yaml:"gameSubtype"`
	// 遊戲版本
	GameVersion string `protobuf:"bytes,5,opt,name=game_version,json=gameVersion,proto3" json:"gameVersion" bson:"gameVersion" yaml:"gameVersion"`
	// 遊戲代碼
	GameCode string `protobuf:"bytes,6,opt,name=game_code,json=gameCode,proto3" json:"gameCode" yaml:"gameCode" bson:"gameCode"`
	// 桌代碼
	TableCode string `protobuf:"bytes,7,opt,name=table_code,json=tableCode,proto3" json:"tableCode" bson:"tableCode" yaml:"tableCode"`
	// 班代碼
	ShiftCode string `protobuf:"bytes,8,opt,name=shift_code,json=shiftCode,proto3" json:"shiftCode" bson:"shiftCode" yaml:"shiftCode"`
	// 開始時間
	TsStart *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=ts_start,json=tsStart,proto3" json:"tsStart" bson:"tsStart" yaml:"tsStart"`
	// 標籤
	Tags map[string]string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"tags" yaml:"tags"`
	// 執行遊戲局
	RoundCodes []string `protobuf:"bytes,24,rep,name=round_codes,json=roundCodes,proto3" json:"roundCodes" bson:"roundCodes" yaml:"roundCodes"`
	// 洗牌
	ShoeCodes []string `protobuf:"bytes,25,rep,name=shoe_codes,json=shoeCodes,proto3" json:"shoeCodes" bson:"shoeCodes" yaml:"shoeCodes"`
	// 結束
	IsEnd bool `protobuf:"varint,18,opt,name=is_end,json=isEnd,proto3" json:"isEnd" bson:"isEnd" yaml:"isEnd"`
	// 結束時間
	TsEnd *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=ts_end,json=tsEnd,proto3" json:"tsEnd" bson:"tsEnd,omitempty" yaml:"tsEnd"`
}

func (x *ShiftRecord) Reset() {
	*x = ShiftRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recorder_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftRecord) ProtoMessage() {}

func (x *ShiftRecord) ProtoReflect() protoreflect.Message {
	mi := &file_recorder_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftRecord.ProtoReflect.Descriptor instead.
func (*ShiftRecord) Descriptor() ([]byte, []int) {
	return file_recorder_record_proto_rawDescGZIP(), []int{8}
}

func (x *ShiftRecord) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ShiftRecord) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

func (x *ShiftRecord) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *ShiftRecord) GetGameSubtype() string {
	if x != nil {
		return x.GameSubtype
	}
	return ""
}

func (x *ShiftRecord) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *ShiftRecord) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *ShiftRecord) GetTableCode() string {
	if x != nil {
		return x.TableCode
	}
	return ""
}

func (x *ShiftRecord) GetShiftCode() string {
	if x != nil {
		return x.ShiftCode
	}
	return ""
}

func (x *ShiftRecord) GetTsStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TsStart
	}
	return nil
}

func (x *ShiftRecord) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ShiftRecord) GetRoundCodes() []string {
	if x != nil {
		return x.RoundCodes
	}
	return nil
}

func (x *ShiftRecord) GetShoeCodes() []string {
	if x != nil {
		return x.ShoeCodes
	}
	return nil
}

func (x *ShiftRecord) GetIsEnd() bool {
	if x != nil {
		return x.IsEnd
	}
	return false
}

func (x *ShiftRecord) GetTsEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEnd
	}
	return nil
}

var File_recorder_record_proto protoreflect.FileDescriptor

var file_recorder_record_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x03, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x48, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x22, 0x65, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xe6, 0x03, 0x0a, 0x0a, 0x53, 0x74,
	0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x61, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03,
	0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x44,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64,
	0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x61, 0x74, 0x22, 0xe4, 0x03, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x9a,
	0x84, 0x9e, 0x03, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x61, 0x74, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x61,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x9a, 0x84, 0x9e,
	0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x48, 0x02, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x48, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x65,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x07, 0x62, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x04, 0x53, 0x65,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x1a, 0x4c, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa8, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x19,
	0x9a, 0x84, 0x9e, 0x03, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x07, 0x62, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x53, 0x0a,
	0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b,
	0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x61, 0x74, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x6c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x21, 0x9a,
	0x84, 0x9e, 0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x42, 0x1d,
	0x9a, 0x84, 0x9e, 0x03, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x4e, 0x0a,
	0x06, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x39, 0x0a,
	0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0x9a,
	0x84, 0x9e, 0x03, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x9a,
	0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48,
	0x01, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x02, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x5c, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x57, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x66, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x48, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x04, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xea, 0x04, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f,
	0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x52, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x63, 0x6b,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x64, 0x65,
	0x63, 0x6b, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x73,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x05, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x1a, 0x48, 0x0a, 0x0a, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x04, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x06,
	0x74, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x9a, 0x84, 0x9e, 0x03, 0x16, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xb4, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x65, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44,
	0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x49, 0x4e, 0x10, 0x0b, 0x2a, 0x4d, 0x0a, 0x07,
	0x42, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x42, 0x9c, 0x01, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2f,
	0x77, 0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x62, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x52,
	0x58, 0x58, 0xaa, 0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xca, 0x02, 0x08,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0xe2, 0x02, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_recorder_record_proto_rawDescOnce sync.Once
	file_recorder_record_proto_rawDescData = file_recorder_record_proto_rawDesc
)

func file_recorder_record_proto_rawDescGZIP() []byte {
	file_recorder_record_proto_rawDescOnce.Do(func() {
		file_recorder_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_recorder_record_proto_rawDescData)
	})
	return file_recorder_record_proto_rawDescData
}

var file_recorder_record_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_recorder_record_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_recorder_record_proto_goTypes = []interface{}{
	(StepActionType)(0),           // 0: recorder.StepActionType
	(BetStep)(0),                  // 1: recorder.BetStep
	(*Card)(nil),                  // 2: recorder.Card
	(*CardList)(nil),              // 3: recorder.CardList
	(*StepAction)(nil),            // 4: recorder.StepAction
	(*Step)(nil),                  // 5: recorder.Step
	(*Seat)(nil),                  // 6: recorder.Seat
	(*RoundRecord)(nil),           // 7: recorder.RoundRecord
	(*Deck)(nil),                  // 8: recorder.Deck
	(*ShoeRecord)(nil),            // 9: recorder.ShoeRecord
	(*ShiftRecord)(nil),           // 10: recorder.ShiftRecord
	nil,                           // 11: recorder.StepAction.CardsEntry
	nil,                           // 12: recorder.Seat.CardsEntry
	nil,                           // 13: recorder.RoundRecord.TagsEntry
	nil,                           // 14: recorder.RoundRecord.SeatsEntry
	nil,                           // 15: recorder.RoundRecord.PlayersEntry
	nil,                           // 16: recorder.RoundRecord.PlayersNameEntry
	nil,                           // 17: recorder.RoundRecord.WinTypeEntry
	nil,                           // 18: recorder.RoundRecord.MediasEntry
	nil,                           // 19: recorder.RoundRecord.FortuneRatesEntry
	nil,                           // 20: recorder.ShoeRecord.DecksEntry
	nil,                           // 21: recorder.ShiftRecord.TagsEntry
	(*anypb.Any)(nil),             // 22: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 23: google.protobuf.Timestamp
	(games.WinType)(0),            // 24: games.WinType
}
var file_recorder_record_proto_depIdxs = []int32{
	2,  // 0: recorder.CardList.list:type_name -> recorder.Card
	0,  // 1: recorder.StepAction.type:type_name -> recorder.StepActionType
	11, // 2: recorder.StepAction.cards:type_name -> recorder.StepAction.CardsEntry
	22, // 3: recorder.StepAction.data:type_name -> google.protobuf.Any
	23, // 4: recorder.Step.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 5: recorder.Step.actions:type_name -> recorder.StepAction
	1,  // 6: recorder.Step.bet_step:type_name -> recorder.BetStep
	12, // 7: recorder.Seat.cards:type_name -> recorder.Seat.CardsEntry
	13, // 8: recorder.RoundRecord.tags:type_name -> recorder.RoundRecord.TagsEntry
	23, // 9: recorder.RoundRecord.ts_start:type_name -> google.protobuf.Timestamp
	1,  // 10: recorder.RoundRecord.bet_step:type_name -> recorder.BetStep
	14, // 11: recorder.RoundRecord.seats:type_name -> recorder.RoundRecord.SeatsEntry
	15, // 12: recorder.RoundRecord.players:type_name -> recorder.RoundRecord.PlayersEntry
	16, // 13: recorder.RoundRecord.players_name:type_name -> recorder.RoundRecord.PlayersNameEntry
	5,  // 14: recorder.RoundRecord.process:type_name -> recorder.Step
	23, // 15: recorder.RoundRecord.ts_end:type_name -> google.protobuf.Timestamp
	17, // 16: recorder.RoundRecord.win_type:type_name -> recorder.RoundRecord.WinTypeEntry
	18, // 17: recorder.RoundRecord.medias:type_name -> recorder.RoundRecord.MediasEntry
	19, // 18: recorder.RoundRecord.fortune_rates:type_name -> recorder.RoundRecord.FortuneRatesEntry
	3,  // 19: recorder.Deck.cards:type_name -> recorder.CardList
	23, // 20: recorder.ShoeRecord.ts_start:type_name -> google.protobuf.Timestamp
	20, // 21: recorder.ShoeRecord.decks:type_name -> recorder.ShoeRecord.DecksEntry
	23, // 22: recorder.ShoeRecord.ts_end:type_name -> google.protobuf.Timestamp
	23, // 23: recorder.ShiftRecord.ts_start:type_name -> google.protobuf.Timestamp
	21, // 24: recorder.ShiftRecord.tags:type_name -> recorder.ShiftRecord.TagsEntry
	23, // 25: recorder.ShiftRecord.ts_end:type_name -> google.protobuf.Timestamp
	3,  // 26: recorder.StepAction.CardsEntry.value:type_name -> recorder.CardList
	3,  // 27: recorder.Seat.CardsEntry.value:type_name -> recorder.CardList
	6,  // 28: recorder.RoundRecord.SeatsEntry.value:type_name -> recorder.Seat
	24, // 29: recorder.RoundRecord.WinTypeEntry.value:type_name -> games.WinType
	8,  // 30: recorder.ShoeRecord.DecksEntry.value:type_name -> recorder.Deck
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_recorder_record_proto_init() }
func file_recorder_record_proto_init() {
	if File_recorder_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recorder_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShoeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recorder_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recorder_record_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_recorder_record_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recorder_record_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recorder_record_proto_goTypes,
		DependencyIndexes: file_recorder_record_proto_depIdxs,
		EnumInfos:         file_recorder_record_proto_enumTypes,
		MessageInfos:      file_recorder_record_proto_msgTypes,
	}.Build()
	File_recorder_record_proto = out.File
	file_recorder_record_proto_rawDesc = nil
	file_recorder_record_proto_goTypes = nil
	file_recorder_record_proto_depIdxs = nil
}
