// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: games/bullfight/record.proto

package bullfight

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameSubtype int32

const (
	// 未指定
	GameSubtype_BULLFIGHT_TYPE_UNSPECIFIED GameSubtype = 0
	// 經典
	GameSubtype_BULLFIGHT_CLASSIC GameSubtype = 1
	// 區塊鏈牛牛
	GameSubtype_BULLFIGHT_BLOCKCHAIN GameSubtype = 16
)

// Enum value maps for GameSubtype.
var (
	GameSubtype_name = map[int32]string{
		0:  "BULLFIGHT_TYPE_UNSPECIFIED",
		1:  "BULLFIGHT_CLASSIC",
		16: "BULLFIGHT_BLOCKCHAIN",
	}
	GameSubtype_value = map[string]int32{
		"BULLFIGHT_TYPE_UNSPECIFIED": 0,
		"BULLFIGHT_CLASSIC":          1,
		"BULLFIGHT_BLOCKCHAIN":       16,
	}
)

func (x GameSubtype) Enum() *GameSubtype {
	p := new(GameSubtype)
	*p = x
	return p
}

func (x GameSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[0].Descriptor()
}

func (GameSubtype) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[0]
}

func (x GameSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameSubtype.Descriptor instead.
func (GameSubtype) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{0}
}

// 步驟，依據遊戲供應商邏輯，不是每個步驟都會走到
type Step int32

const (
	// 未指定
	Step_STEP_UNSPECIFIED Step = 0
	// 本局開始
	Step_ROUND_START Step = 1
	// 本局完成
	Step_ROUND_FINISHED Step = 2
	// 本局取消
	Step_ROUND_CANCELED Step = 3
	// 派發起始位子牌(決定順位)
	Step_DEAL_FIRSTCARD Step = 4
	// 派發莊家例牌
	Step_DEAL_BANKER_1 Step = 5
	// 派發玩家1例牌
	Step_DEAL_PLAYER_1 Step = 6
	// 派發玩家2例牌
	Step_DEAL_PLAYER_2 Step = 7
	// 派發玩家3例牌
	Step_DEAL_PLAYER_3 Step = 8
	// 開放下注
	Step_ROUND_BET Step = 9
	// 停止下注
	Step_NO_MORE_BET Step = 10
	// 開莊家1例牌
	Step_SHOW_BANKER_1 Step = 12
	// 依情況一張張跑
	Step_SHOW_BANKER_1_1 Step = 13
	Step_SHOW_BANKER_1_2 Step = 14
	Step_SHOW_BANKER_1_3 Step = 15
	Step_SHOW_BANKER_1_4 Step = 16
	Step_SHOW_BANKER_1_5 Step = 17
	// 開玩家1例牌
	Step_SHOW_PLAYER_1 Step = 18
	// 依情況一張張跑
	Step_SHOW_PLAYER_1_1 Step = 19
	Step_SHOW_PLAYER_1_2 Step = 20
	Step_SHOW_PLAYER_1_3 Step = 21
	Step_SHOW_PLAYER_1_4 Step = 22
	Step_SHOW_PLAYER_1_5 Step = 23
	// 開玩家2例牌
	Step_SHOW_PLAYER_2 Step = 24
	// 依情況一張張跑
	Step_SHOW_PLAYER_2_1 Step = 25
	Step_SHOW_PLAYER_2_2 Step = 26
	Step_SHOW_PLAYER_2_3 Step = 27
	Step_SHOW_PLAYER_2_4 Step = 28
	Step_SHOW_PLAYER_2_5 Step = 29
	// 開玩家3例牌
	Step_SHOW_PLAYER_3 Step = 30
	// 依情況一張張跑
	Step_SHOW_PLAYER_3_1 Step = 31
	Step_SHOW_PLAYER_3_2 Step = 32
	Step_SHOW_PLAYER_3_3 Step = 33
	Step_SHOW_PLAYER_3_4 Step = 34
	Step_SHOW_PLAYER_3_5 Step = 35
	Step_DEALER_CONFIRM  Step = 40
	// PITBOSS 修改派發例牌
	Step_PITBOSS_MODIFY_BANKER_1 Step = 41
	Step_PITBOSS_MODIFY_PLAYER_1 Step = 42
	Step_PITBOSS_MODIFY_PLAYER_2 Step = 43
	Step_PITBOSS_MODIFY_PLAYER_3 Step = 44
)

// Enum value maps for Step.
var (
	Step_name = map[int32]string{
		0:  "STEP_UNSPECIFIED",
		1:  "ROUND_START",
		2:  "ROUND_FINISHED",
		3:  "ROUND_CANCELED",
		4:  "DEAL_FIRSTCARD",
		5:  "DEAL_BANKER_1",
		6:  "DEAL_PLAYER_1",
		7:  "DEAL_PLAYER_2",
		8:  "DEAL_PLAYER_3",
		9:  "ROUND_BET",
		10: "NO_MORE_BET",
		12: "SHOW_BANKER_1",
		13: "SHOW_BANKER_1_1",
		14: "SHOW_BANKER_1_2",
		15: "SHOW_BANKER_1_3",
		16: "SHOW_BANKER_1_4",
		17: "SHOW_BANKER_1_5",
		18: "SHOW_PLAYER_1",
		19: "SHOW_PLAYER_1_1",
		20: "SHOW_PLAYER_1_2",
		21: "SHOW_PLAYER_1_3",
		22: "SHOW_PLAYER_1_4",
		23: "SHOW_PLAYER_1_5",
		24: "SHOW_PLAYER_2",
		25: "SHOW_PLAYER_2_1",
		26: "SHOW_PLAYER_2_2",
		27: "SHOW_PLAYER_2_3",
		28: "SHOW_PLAYER_2_4",
		29: "SHOW_PLAYER_2_5",
		30: "SHOW_PLAYER_3",
		31: "SHOW_PLAYER_3_1",
		32: "SHOW_PLAYER_3_2",
		33: "SHOW_PLAYER_3_3",
		34: "SHOW_PLAYER_3_4",
		35: "SHOW_PLAYER_3_5",
		40: "DEALER_CONFIRM",
		41: "PITBOSS_MODIFY_BANKER_1",
		42: "PITBOSS_MODIFY_PLAYER_1",
		43: "PITBOSS_MODIFY_PLAYER_2",
		44: "PITBOSS_MODIFY_PLAYER_3",
	}
	Step_value = map[string]int32{
		"STEP_UNSPECIFIED":        0,
		"ROUND_START":             1,
		"ROUND_FINISHED":          2,
		"ROUND_CANCELED":          3,
		"DEAL_FIRSTCARD":          4,
		"DEAL_BANKER_1":           5,
		"DEAL_PLAYER_1":           6,
		"DEAL_PLAYER_2":           7,
		"DEAL_PLAYER_3":           8,
		"ROUND_BET":               9,
		"NO_MORE_BET":             10,
		"SHOW_BANKER_1":           12,
		"SHOW_BANKER_1_1":         13,
		"SHOW_BANKER_1_2":         14,
		"SHOW_BANKER_1_3":         15,
		"SHOW_BANKER_1_4":         16,
		"SHOW_BANKER_1_5":         17,
		"SHOW_PLAYER_1":           18,
		"SHOW_PLAYER_1_1":         19,
		"SHOW_PLAYER_1_2":         20,
		"SHOW_PLAYER_1_3":         21,
		"SHOW_PLAYER_1_4":         22,
		"SHOW_PLAYER_1_5":         23,
		"SHOW_PLAYER_2":           24,
		"SHOW_PLAYER_2_1":         25,
		"SHOW_PLAYER_2_2":         26,
		"SHOW_PLAYER_2_3":         27,
		"SHOW_PLAYER_2_4":         28,
		"SHOW_PLAYER_2_5":         29,
		"SHOW_PLAYER_3":           30,
		"SHOW_PLAYER_3_1":         31,
		"SHOW_PLAYER_3_2":         32,
		"SHOW_PLAYER_3_3":         33,
		"SHOW_PLAYER_3_4":         34,
		"SHOW_PLAYER_3_5":         35,
		"DEALER_CONFIRM":          40,
		"PITBOSS_MODIFY_BANKER_1": 41,
		"PITBOSS_MODIFY_PLAYER_1": 42,
		"PITBOSS_MODIFY_PLAYER_2": 43,
		"PITBOSS_MODIFY_PLAYER_3": 44,
	}
)

func (x Step) Enum() *Step {
	p := new(Step)
	*p = x
	return p
}

func (x Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Step) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[1].Descriptor()
}

func (Step) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[1]
}

func (x Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Step.Descriptor instead.
func (Step) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{1}
}

// 座位功能代碼
type GameSeat int32

const (
	// 未指定
	GameSeat_SEAT_UNSPECIFIED GameSeat = 0
	// 玩家1
	GameSeat_PLAYER1 GameSeat = 1
	// 玩家2
	GameSeat_PLAYER2 GameSeat = 2
	// 玩家3
	GameSeat_PLAYER3 GameSeat = 3
	// 莊家
	GameSeat_BANKER GameSeat = 16
)

// Enum value maps for GameSeat.
var (
	GameSeat_name = map[int32]string{
		0:  "SEAT_UNSPECIFIED",
		1:  "PLAYER1",
		2:  "PLAYER2",
		3:  "PLAYER3",
		16: "BANKER",
	}
	GameSeat_value = map[string]int32{
		"SEAT_UNSPECIFIED": 0,
		"PLAYER1":          1,
		"PLAYER2":          2,
		"PLAYER3":          3,
		"BANKER":           16,
	}
)

func (x GameSeat) Enum() *GameSeat {
	p := new(GameSeat)
	*p = x
	return p
}

func (x GameSeat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameSeat) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[2].Descriptor()
}

func (GameSeat) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[2]
}

func (x GameSeat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameSeat.Descriptor instead.
func (GameSeat) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{2}
}

// 豹子 > 同花順 > 同花 > 順子 > 對子 > 散牌
type CardPattern int32

const (
	// 未指定
	CardPattern_CARD_PATTERN_UNSPECIFIED CardPattern = 0
	// 高牌
	CardPattern_HIGH CardPattern = 1
	// 有牛
	CardPattern_BULL CardPattern = 2
	// 牛牛
	CardPattern_BULL_BULL CardPattern = 3
	// 四花
	CardPattern_FOUR_FACE CardPattern = 4
	// 五花
	CardPattern_FULL_FACE CardPattern = 5
	// 五小
	CardPattern_FULL_SMALL CardPattern = 6
)

// Enum value maps for CardPattern.
var (
	CardPattern_name = map[int32]string{
		0: "CARD_PATTERN_UNSPECIFIED",
		1: "HIGH",
		2: "BULL",
		3: "BULL_BULL",
		4: "FOUR_FACE",
		5: "FULL_FACE",
		6: "FULL_SMALL",
	}
	CardPattern_value = map[string]int32{
		"CARD_PATTERN_UNSPECIFIED": 0,
		"HIGH":                     1,
		"BULL":                     2,
		"BULL_BULL":                3,
		"FOUR_FACE":                4,
		"FULL_FACE":                5,
		"FULL_SMALL":               6,
	}
)

func (x CardPattern) Enum() *CardPattern {
	p := new(CardPattern)
	*p = x
	return p
}

func (x CardPattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardPattern) Descriptor() protoreflect.EnumDescriptor {
	return file_games_bullfight_record_proto_enumTypes[3].Descriptor()
}

func (CardPattern) Type() protoreflect.EnumType {
	return &file_games_bullfight_record_proto_enumTypes[3]
}

func (x CardPattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardPattern.Descriptor instead.
func (CardPattern) EnumDescriptor() ([]byte, []int) {
	return file_games_bullfight_record_proto_rawDescGZIP(), []int{3}
}

var File_games_bullfight_record_proto protoreflect.FileDescriptor

var file_games_bullfight_record_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x2a,
	0x5e, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x42, 0x55, 0x4c, 0x4c, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x55, 0x4c, 0x4c, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x4c, 0x4c, 0x46, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x10, 0x2a,
	0xcd, 0x06, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x10,
	0x06, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x32, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x42, 0x45, 0x54, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x52,
	0x45, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48,
	0x4f, 0x57, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31,
	0x5f, 0x32, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x4e,
	0x4b, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f,
	0x57, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x34, 0x10, 0x10, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31, 0x5f,
	0x35, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x31, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0x14,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x31, 0x5f, 0x33, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x34, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48,
	0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x5f, 0x35, 0x10, 0x17, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32,
	0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x5f, 0x32, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x5f, 0x33, 0x10,
	0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x32, 0x5f, 0x34, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x1e, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x5f,
	0x31, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x33, 0x5f, 0x32, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x5f, 0x33, 0x10, 0x21, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x5f, 0x34,
	0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x33, 0x5f, 0x35, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x41, 0x4c, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x41,
	0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x29, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x54, 0x42,
	0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x31, 0x10, 0x2a, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32,
	0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x54, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x2c, 0x2a,
	0x53, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x31, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x4b,
	0x45, 0x52, 0x10, 0x10, 0x2a, 0x7c, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x55, 0x4c, 0x4c, 0x5f, 0x42, 0x55,
	0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x43, 0x45,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c,
	0x10, 0x06, 0x42, 0xc7, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x63, 0x61, 0x73,
	0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2f, 0x77, 0x65,
	0x63, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x67,
	0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68,
	0x74, 0xa2, 0x02, 0x03, 0x47, 0x42, 0x58, 0xaa, 0x02, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x2e,
	0x42, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0xca, 0x02, 0x0f, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x5c, 0x42, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0xe2, 0x02, 0x1b, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x5c, 0x42, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x3a, 0x3a, 0x42, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x67, 0x68, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_games_bullfight_record_proto_rawDescOnce sync.Once
	file_games_bullfight_record_proto_rawDescData = file_games_bullfight_record_proto_rawDesc
)

func file_games_bullfight_record_proto_rawDescGZIP() []byte {
	file_games_bullfight_record_proto_rawDescOnce.Do(func() {
		file_games_bullfight_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_games_bullfight_record_proto_rawDescData)
	})
	return file_games_bullfight_record_proto_rawDescData
}

var file_games_bullfight_record_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_games_bullfight_record_proto_goTypes = []interface{}{
	(GameSubtype)(0), // 0: games.bullfight.GameSubtype
	(Step)(0),        // 1: games.bullfight.Step
	(GameSeat)(0),    // 2: games.bullfight.GameSeat
	(CardPattern)(0), // 3: games.bullfight.CardPattern
}
var file_games_bullfight_record_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_games_bullfight_record_proto_init() }
func file_games_bullfight_record_proto_init() {
	if File_games_bullfight_record_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_games_bullfight_record_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_games_bullfight_record_proto_goTypes,
		DependencyIndexes: file_games_bullfight_record_proto_depIdxs,
		EnumInfos:         file_games_bullfight_record_proto_enumTypes,
	}.Build()
	File_games_bullfight_record_proto = out.File
	file_games_bullfight_record_proto_rawDesc = nil
	file_games_bullfight_record_proto_goTypes = nil
	file_games_bullfight_record_proto_depIdxs = nil
}
