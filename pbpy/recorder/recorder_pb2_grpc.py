# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from recorder import record_pb2 as recorder_dot_record__pb2
from recorder import recorder_pb2 as recorder_dot_recorder__pb2


class RecorderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecordShiftStarted = channel.unary_unary(
                '/recorder.RecorderService/RecordShiftStarted',
                request_serializer=recorder_dot_recorder__pb2.RecordShiftStartedRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.ShiftRecord.FromString,
                _registered_method=True)
        self.RecordShiftEnded = channel.unary_unary(
                '/recorder.RecorderService/RecordShiftEnded',
                request_serializer=recorder_dot_recorder__pb2.RecordShiftEndedRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.ShiftRecord.FromString,
                _registered_method=True)
        self.RecordShoeStarted = channel.unary_unary(
                '/recorder.RecorderService/RecordShoeStarted',
                request_serializer=recorder_dot_recorder__pb2.RecordShoeStartedRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.ShoeRecord.FromString,
                _registered_method=True)
        self.RecordShoeEnded = channel.unary_unary(
                '/recorder.RecorderService/RecordShoeEnded',
                request_serializer=recorder_dot_recorder__pb2.RecordShoeEndedRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.ShoeRecord.FromString,
                _registered_method=True)
        self.RecordRoundStarted = channel.unary_unary(
                '/recorder.RecorderService/RecordRoundStarted',
                request_serializer=recorder_dot_recorder__pb2.RecordRoundStartedRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.RoundRecord.FromString,
                _registered_method=True)
        self.RecordRoundSteps = channel.unary_unary(
                '/recorder.RecorderService/RecordRoundSteps',
                request_serializer=recorder_dot_recorder__pb2.RecordRoundStepsRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.RoundRecord.FromString,
                _registered_method=True)
        self.RecordRoundBeCanceled = channel.unary_unary(
                '/recorder.RecorderService/RecordRoundBeCanceled',
                request_serializer=recorder_dot_recorder__pb2.RecordRoundBeCanceledRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.RoundRecord.FromString,
                _registered_method=True)
        self.RecordRoundFinished = channel.unary_unary(
                '/recorder.RecorderService/RecordRoundFinished',
                request_serializer=recorder_dot_recorder__pb2.RecordRoundFinishedRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.RoundRecord.FromString,
                _registered_method=True)
        self.RecordRoundBeCanceledAfterFinished = channel.unary_unary(
                '/recorder.RecorderService/RecordRoundBeCanceledAfterFinished',
                request_serializer=recorder_dot_recorder__pb2.RecordRoundBeCanceledRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.RoundRecord.FromString,
                _registered_method=True)
        self.RecordRoundVideo = channel.unary_unary(
                '/recorder.RecorderService/RecordRoundVideo',
                request_serializer=recorder_dot_recorder__pb2.RecordRoundMediaRequest.SerializeToString,
                response_deserializer=recorder_dot_record__pb2.RoundRecord.FromString,
                _registered_method=True)


class RecorderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecordShiftStarted(self, request, context):
        """建立新排班
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordShiftEnded(self, request, context):
        """排班結束
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordShoeStarted(self, request, context):
        """開始使用牌靴
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordShoeEnded(self, request, context):
        """使用牌靴完畢
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoundStarted(self, request, context):
        """開啟新局
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoundSteps(self, request, context):
        """記錄步驟
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoundBeCanceled(self, request, context):
        """此局作廢
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoundFinished(self, request, context):
        """結束此局
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoundBeCanceledAfterFinished(self, request, context):
        """事後取消此局
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoundVideo(self, request, context):
        """紀錄回放
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecorderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecordShiftStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordShiftStarted,
                    request_deserializer=recorder_dot_recorder__pb2.RecordShiftStartedRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.ShiftRecord.SerializeToString,
            ),
            'RecordShiftEnded': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordShiftEnded,
                    request_deserializer=recorder_dot_recorder__pb2.RecordShiftEndedRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.ShiftRecord.SerializeToString,
            ),
            'RecordShoeStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordShoeStarted,
                    request_deserializer=recorder_dot_recorder__pb2.RecordShoeStartedRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.ShoeRecord.SerializeToString,
            ),
            'RecordShoeEnded': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordShoeEnded,
                    request_deserializer=recorder_dot_recorder__pb2.RecordShoeEndedRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.ShoeRecord.SerializeToString,
            ),
            'RecordRoundStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordRoundStarted,
                    request_deserializer=recorder_dot_recorder__pb2.RecordRoundStartedRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.RoundRecord.SerializeToString,
            ),
            'RecordRoundSteps': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordRoundSteps,
                    request_deserializer=recorder_dot_recorder__pb2.RecordRoundStepsRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.RoundRecord.SerializeToString,
            ),
            'RecordRoundBeCanceled': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordRoundBeCanceled,
                    request_deserializer=recorder_dot_recorder__pb2.RecordRoundBeCanceledRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.RoundRecord.SerializeToString,
            ),
            'RecordRoundFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordRoundFinished,
                    request_deserializer=recorder_dot_recorder__pb2.RecordRoundFinishedRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.RoundRecord.SerializeToString,
            ),
            'RecordRoundBeCanceledAfterFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordRoundBeCanceledAfterFinished,
                    request_deserializer=recorder_dot_recorder__pb2.RecordRoundBeCanceledRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.RoundRecord.SerializeToString,
            ),
            'RecordRoundVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordRoundVideo,
                    request_deserializer=recorder_dot_recorder__pb2.RecordRoundMediaRequest.FromString,
                    response_serializer=recorder_dot_record__pb2.RoundRecord.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'recorder.RecorderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('recorder.RecorderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RecorderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecordShiftStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordShiftStarted',
            recorder_dot_recorder__pb2.RecordShiftStartedRequest.SerializeToString,
            recorder_dot_record__pb2.ShiftRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordShiftEnded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordShiftEnded',
            recorder_dot_recorder__pb2.RecordShiftEndedRequest.SerializeToString,
            recorder_dot_record__pb2.ShiftRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordShoeStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordShoeStarted',
            recorder_dot_recorder__pb2.RecordShoeStartedRequest.SerializeToString,
            recorder_dot_record__pb2.ShoeRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordShoeEnded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordShoeEnded',
            recorder_dot_recorder__pb2.RecordShoeEndedRequest.SerializeToString,
            recorder_dot_record__pb2.ShoeRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordRoundStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordRoundStarted',
            recorder_dot_recorder__pb2.RecordRoundStartedRequest.SerializeToString,
            recorder_dot_record__pb2.RoundRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordRoundSteps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordRoundSteps',
            recorder_dot_recorder__pb2.RecordRoundStepsRequest.SerializeToString,
            recorder_dot_record__pb2.RoundRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordRoundBeCanceled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordRoundBeCanceled',
            recorder_dot_recorder__pb2.RecordRoundBeCanceledRequest.SerializeToString,
            recorder_dot_record__pb2.RoundRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordRoundFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordRoundFinished',
            recorder_dot_recorder__pb2.RecordRoundFinishedRequest.SerializeToString,
            recorder_dot_record__pb2.RoundRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordRoundBeCanceledAfterFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordRoundBeCanceledAfterFinished',
            recorder_dot_recorder__pb2.RecordRoundBeCanceledRequest.SerializeToString,
            recorder_dot_record__pb2.RoundRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordRoundVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recorder.RecorderService/RecordRoundVideo',
            recorder_dot_recorder__pb2.RecordRoundMediaRequest.SerializeToString,
            recorder_dot_record__pb2.RoundRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
